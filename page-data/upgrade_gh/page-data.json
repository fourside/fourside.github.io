{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/upgrade_gh",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"ghコマンドをupdateしたい","publishDate":"2022/01/26 13:54:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"日頃から ghコマンド にお世話になっていまして、PR作ったり、ターミナルからリポジトリをブラウザで開くのに使ったりしているのですが、不意にバナーが出ることで新バージョンがリリースされたことを知ります。そうするとGitHubのcli/cliリポジトリのRelease…","html":"<p>日頃から <a href=\"https://github.com/cli/cli\" title=\"cli/cli: GitHub’s official command line tool\">ghコマンド</a> にお世話になっていまして、PR作ったり、ターミナルからリポジトリをブラウザで開くのに使ったりしているのですが、不意にバナーが出ることで新バージョンがリリースされたことを知ります。そうするとGitHubのcli/cliリポジトリのReleaseページに行き、該当するバイナリを目で選んでダウンロードし、パスに通す。という手間をやっていたのですが、流石に手作業が多すぎると思い、簡単なスクリプトを書きました。</p>\n<p><div id=\"gist114138837\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-upgrade_gh-sh\" class=\"file my-2\">\n    \n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-shell  \">\n\n      \n<div class=\"js-check-bidi js-blob-code-container blob-code-content\">\n\n  <template class=\"js-file-alert-template\">\n  <div data-view-component=\"true\" class=\"flash flash-warn flash-full d-flex flex-items-center\">\n  <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>\n</svg>\n  \n    <span>\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      <a href=\"https://github.co/hiddenchars\" target=\"_blank\">Learn more about bidirectional Unicode characters</a>\n    </span>\n\n\n  <div data-view-component=\"true\" class=\"flash-action\">      <a href=\"{{ revealButtonHref }}\" data-view-component=\"true\" class=\"btn-sm btn\">  Show hidden characters\n  \n</a>\n</div>\n</div></template>\n<template class=\"js-line-alert-template\">\n  <span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"line-alert tooltipped tooltipped-e\">\n    <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path fill-rule=\"evenodd\" d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"></path>\n</svg>\n</span></template>\n\n  <table class=\"highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file\" data-tab-size=\"8\" data-paste-markdown-skip data-tagsearch-lang=\"Shell\" data-tagsearch-path=\"upgrade_gh.sh\">\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L1\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"1\"></td>\n          <td id=\"file-upgrade_gh-sh-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"><span class=\"pl-c\">#!</span>/bin/bash</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L2\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"2\"></td>\n          <td id=\"file-upgrade_gh-sh-LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">set</span> -ex</td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L3\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"3\"></td>\n          <td id=\"file-upgrade_gh-sh-LC3\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L4\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"4\"></td>\n          <td id=\"file-upgrade_gh-sh-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>/work</td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L5\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"5\"></td>\n          <td id=\"file-upgrade_gh-sh-LC5\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L6\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"6\"></td>\n          <td id=\"file-upgrade_gh-sh-LC6\" class=\"blob-code blob-code-inner js-file-line\">GH_URL=<span class=\"pl-s\"><span class=\"pl-pds\">`</span>gh release view -R cli/cli --json assets -q .assets[].url <span class=\"pl-k\">|</span> grep linux_amd64.tar.gz<span class=\"pl-pds\">`</span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L7\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"7\"></td>\n          <td id=\"file-upgrade_gh-sh-LC7\" class=\"blob-code blob-code-inner js-file-line\">curl -LO <span class=\"pl-smi\">$GH_URL</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L8\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"8\"></td>\n          <td id=\"file-upgrade_gh-sh-LC8\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L9\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"9\"></td>\n          <td id=\"file-upgrade_gh-sh-LC9\" class=\"blob-code blob-code-inner js-file-line\">GH_FILE=<span class=\"pl-s\"><span class=\"pl-pds\">`</span>basename <span class=\"pl-smi\">${GH_URL}</span><span class=\"pl-pds\">`</span></span></td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L10\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"10\"></td>\n          <td id=\"file-upgrade_gh-sh-LC10\" class=\"blob-code blob-code-inner js-file-line\">tar xzf <span class=\"pl-smi\">$GH_FILE</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L11\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"11\"></td>\n          <td id=\"file-upgrade_gh-sh-LC11\" class=\"blob-code blob-code-inner js-file-line\">GH_DIR=<span class=\"pl-smi\">${GH_FILE<span class=\"pl-k\">%</span>.tar.gz}</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L12\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"12\"></td>\n          <td id=\"file-upgrade_gh-sh-LC12\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-upgrade_gh-sh-L13\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"13\"></td>\n          <td id=\"file-upgrade_gh-sh-LC13\" class=\"blob-code blob-code-inner js-file-line\">ln -fs <span class=\"pl-k\">~</span>/work/<span class=\"pl-smi\">${GH_DIR}</span>/bin/gh <span class=\"pl-k\">~</span>/bin/gh</td>\n        </tr>\n  </table>\n</div>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/fourside/ef69da72c47779591ee9ab23af096ea4/raw/86d22d3c01b32b2fde4487ef50edd262011fe501/upgrade_gh.sh\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/fourside/ef69da72c47779591ee9ab23af096ea4#file-upgrade_gh-sh\">\n          upgrade_gh.sh\n        </a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<p>今までちゃんと調べないで使ってたせいで、知らないオプションがいろいろありました。</p>\n<ul>\n<li><code class=\"language-text\">-R</code> オプションでカレントディレクトリ以外のリポジトリが参照できる</li>\n<li>JSONのフォーマットで出力できて、さらにjqのような絞り込みができる</li>\n</ul>\n<p>updateサブコマンドの実装案とかissueにないか探してたら、オフィシャルの案内ではパッケージマネージャ経由でバージョンをあげろということみたいですね…。</p>"}}}},"pageContext":{"slug":"upgrade_gh","previous":{"body":{"body":"- [クラウド破産を回避するInfrastructure as Code実践ガイド - KOS-MOS - BOOTH](https://booth.pm/ja/items/2366365)\n    - 技術書典9で見つけました\n    - AWSアカウントをセキュアに使うために、それ用のAWSリソースをTerraformで作成しようという内容\n\n### 動機\n- 全くノーガードだったものの、ちゃんとしたい気持ちは常にあった\n    - [AWSアカウントを作ったら最初にやるべきこと ～令和元年版～ | Developers.IO](https://dev.classmethod.jp/articles/aws-1st-step-new-era-reiwa/)\n        - こういうのもブックマークして積んだままになってた\n        - 開発に *直接* 関係しない部分だし…\n    - とはいえ、毎月AWSにお金を払っているのだし、最低限のことはやっておきたい\n\n### やったこと\n- Terraformで作成されているのを、AWS CDKで再実装\n    - CDKの勉強にもなるし\n    - 主に10章から18章、22章を対象にした\n    - 作ったリソースは以下の通り\n        - CloudTrail / AWS Config / GuardDuty / IAM Access Analyzer / Security Hub / Chatbot\n        - これらに S3 / IAM / SNS らへんを連携させる\n        - 22章では、月額の利用料金をSlack通知する Lambda Function を作成\n- 作成したものはこちら\n  - [fourside/cloud-bankruptcy](https://github.com/fourside/cloud-bankruptcy)\n\n### やってみて\n- IAMロールらへんの理解が曖昧だったのが、 *少し* 理解が進んだ\n- AWS Config の料金が意外とかかる\n    - ビジネスで使うなら微々たるものかもだけど、対象ルールが200弱で 1.9 USD/月 くらいになった\n    - 逆にいうと、ほかはほとんどかからないのでやっておくのが得\n- よくわからないタイミングでGuardDutyから通知がきて怖い…\n    - Severity: LOW なので放置してしまっているが…\n    - とはいえ、ちょっとしたことでも通知が来ることによる安心感のほうが大きい\n- 利用料金のSlack通知が便利\n    - 「普段ならこれくらいなのに、今月の予測値が高い」みたいな状況に気付ける\n        - 後始末してなかったEC2リソース(インスタンスやElasticIP)があることに気づけた\n"},"title":"「クラウド破産を回避するIaC実践ガイド」を読んでCDKで再実装しました","slug":"cloud_bankruptcy_iac","updatedAt":"2020-11-05T04:01:00.400Z"},"next":{"body":{"body":"## やりたいこと\n\n現在運用しているサーバがsinatra + hamlで構成されており、バージョンアップに追従できておらず、普段からrubyを触らなくなってしまったのもあり、機能追加も億劫になっていました。そこでどうせなら\n\n- Node.jsでサーバサイドを書いてみて\n- テンプレートエンジンは使い慣れているReactを使う\n\nをやってみよう、の2点です。\n\n## サーバ\n\n最初は [Express](https://expressjs.com/) で書き始めたんですが、[State of JavaScript 2021/2022](https://app.stateofjs.com/survey/state-of-js/2021) で見かけた [Fastify](https://www.fastify.io/) で書き直しました。単純に知らないライブラリを触っておこう、それにパフォーマンスもよいらしいし、くらいのモチベーションです。（最終的にはコンテナに載せるのでfastifyが謳う「ロガーに何々を選びました」という惹句は決め手になりにくいなとは思いました）（が、最初からログがJSON形式なのは今っぽさを感じます）\n\n触ってみて分かったfastifyのよいところのひとつに、テストが書きやすさがあります。[Fastify - Testing](https://www.fastify.io/docs/latest/Guides/Testing/#benefits-of-using-fastifyinject) にある通り、`inject` メソッドで擬似的にHTTPリクエストを送ることができ、簡単にテストが書けます。\n\n## SSR\n\n単純にSSRしたいだけなら [ReactDOMServer – React](https://ja.reactjs.org/docs/react-dom-server.html) にあるメソッド群を使えばよいだけでした。`renderToStaticMarkup` は、渡したコンポーネントのレンダリング結果をHTML文字列として返してくれるメソッドです。\n\nただ今回返したいレスポンスは、HTMLではなくXMLでした。JSXの型として扱えるのは、@types/reactに定義されてある通りで、HTML要素に存在するものに限られています。当然、xml名前空間で指定されたDTDのことなんてTypeScriptは知らないので、以下のコードをXMLを扱うコンポーネントと同じモジュールに貼り付けて回避しました。\n\n```typescript\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      [elemName: string]: unknown;\n    }\n  }\n}\n```\n\nこれでもなお、`pubDate` のようなキャメルケースの要素を扱うと、レンダリング時にreact-domが次のようなwarningを出力します。\n\n```\nWarning: <pubDate /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.\n```\n\nこれを抑止するには `NODE_ENV=production` を指定して実行すればよさそうです。productionではないテスト実行時などにこのwarningが出力されて鬱陶しいですが、大きな問題にはならないので一旦目をつむることにします。\n\n## hydration\n\nせっかくSSRにしたので、特にユースケースはないけどhydrationも試してみました。単語自体はSSRの文脈で目にするけれども、実際に何が起きているか、どう実装するかというのは全く知らなかったので触れてみるか、というモチベーションです。\n\n具体的には、[ReactDOMのhydrateメソッド](https://ja.reactjs.org/docs/react-dom.html#hydrate) を使います。クライアント用JSファイルのエントリポイントにて、いつもの `ReactDOM.render(<App />, document.getElementById('root'));` ではなく、`ReactDOM.hydrate(<App />, document.getElementById('root'));` とします 。renderと全く同じインターフェイスなので分かりやすいですね。hydrateメソッドによって、クライアント側では改めてDOM構築をせずに、イベントハンドラなどのアタッチ処理が行われるようです。\n\nここでAppコンポーネントが何かしらのデータを受け取るインターフェイスになっていたら、クライアント側ではどこからデータを取得すればよいかが悩みポイントでした。例えば何らかのAPIレスポンスをサーバ側では自由に取得できたとして、クライアント側で同様に取得できるか分からないし、できたとしてサーバ・クライアントで二重に取得するのは無駄で無意味です。そこでNext.jsではどうやってるのか調べてみると、SSRしたHTMLの中にJSONデータをシリアライズしたものを埋め込んでいるようでした。つまりクライアント側でそれを取得してJSON.parseできればよいわけですね。愚直な感じはしますが、workはします。\n\nここまできたらcss in jsも試してみたいと思って試行錯誤したんですが、SSRするのにビルドが必要そうだったりして簡単にできるのはここまでということにして、ひとまず終わりにします。\n\n## まとめ\n\n- 普段Next.jsなどで気にせず行われているSSRやhydrateは、身近なAPIでできる（その先がムズい）\n- Next.js触りたての頃、windowオブジェクトを評価してビルドがコケることがちょいちょいあったけど、そうなる理由がよくわかりました"},"title":"Server Side Renderingしてみました","slug":"simple_server_side_rendering","updatedAt":"2022-02-14T13:55:46.605Z"}}},
    "staticQueryHashes": ["1784162573","882115108"]}