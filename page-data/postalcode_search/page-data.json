{"componentChunkName":"component---src-templates-blog-post-js","path":"/postalcode_search","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"郵便番号検索APIを作った","publishDate":"2020/09/08 11:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"fourside/postalcodesearch 元になるデータは zipcloud の加工済み csv ファイル を使った。ありがたく使わせてもらっています zipcloud でも　WebAPI を公開してるのだけどなるべく自前でホストしたいと思って実装した 構成 いわゆるサーバレス aws-cdk Lambda…","html":"<ul>\n<li><a href=\"https://github.com/fourside/postalcodesearch\">fourside/postalcodesearch</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -s https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod/addresses/1000001 <span class=\"token operator\">|</span> jq <span class=\"token builtin class-name\">.</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"zipcode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1000001\"</span>,\n    <span class=\"token string\">\"address1\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"東京都\"</span>,\n    <span class=\"token string\">\"address2\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"千代田区\"</span>,\n    <span class=\"token string\">\"address3\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"千代田\"</span>,\n    <span class=\"token string\">\"kana1\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"とうきょうと\"</span>,\n    <span class=\"token string\">\"kana2\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ちよだく\"</span>,\n    <span class=\"token string\">\"kana3\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ちよだ\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>\n<p>元になるデータは <a href=\"http://zipcloud.ibsnet.co.jp/\">zipcloud の加工済み csv ファイル</a> を使った。ありがたく使わせてもらっています</p>\n<ul>\n<li>zipcloud でも　WebAPI を公開してるのだけどなるべく自前でホストしたいと思って実装した</li>\n</ul>\n</li>\n</ul>\n<h3>構成</h3>\n<ul>\n<li>いわゆるサーバレス</li>\n<li>\n<p>aws-cdk</p>\n<ul>\n<li>Lambda Function</li>\n<li>API Gateway</li>\n<li>DynamoDB</li>\n</ul>\n</li>\n<li>ちょこちょこ考えなきゃいけないところがあったのでメモしていきます</li>\n</ul>\n<h3>DynamoDB のテーブル設計</h3>\n<ul>\n<li>「データをどう使うか」から設計を始める</li>\n<li>郵便番号をキーに検索するので、パーティションキーは郵便番号にする</li>\n<li>ただし郵便番号はユニークではない。ひとつの郵便番号に複数の住所が紐付くパターンがある</li>\n<li>\n<p>ソートキーが必要になるが、ふさわしい CSV のカラムはない</p>\n<ul>\n<li>住所1や住所2だと重複するし、住所3だと空文字になる</li>\n<li>住所1、住所2、住所3を連結して、ソートキーとした</li>\n<li>\n<p>それでさえ重複するケースがあるので、データ投入時にパーティションキー + ソートキーでユニークにする必要がある</p>\n<ul>\n<li>例: 0741273 北海道 深川市 音江町</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>データ投入</h3>\n<ul>\n<li><code class=\"language-text\">cdk deploy</code> にからめて実行できればと考えたけど、何度も実行する必要はないのでコマンドを分けた</li>\n<li>データ量は、ざっくり13万件弱</li>\n<li>\n<p><a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html\">BatchWriteItem</a></p>\n<ul>\n<li>一度に複数レコードを書き込める API を使う</li>\n<li>\n<p>ただし25件が上限で、超えると次のエラーメッセージ</p>\n<ul>\n<li><code class=\"language-text\">Member must have length less than or equal to 25, Member must have length greater than or equal to 1</code></li>\n<li>上記ドキュメントにもちゃんと書いてあったね…</li>\n<li>13万件 / 25件 で、5200回のリクエストを発行することになる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>DynamoDBのテーブルの Billing mode をプロビジョニング済み(cdkでのデフォルト)にすると途中で失敗する</p>\n<ul>\n<li><code class=\"language-text\">ProvisionedThroughputExceededException: The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API.</code></li>\n<li>オンデマンドにすること</li>\n</ul>\n</li>\n<li>DynamoDBに空文字は登録できないので、null に置き換えること</li>\n<li>元データは Shift_JIS なので、UTF-8 に変更すること</li>\n</ul>\n<h3>misc</h3>\n<ul>\n<li>\n<p>Node.js でのファイルシステムのアクセスで、Stream API を使ってみた</p>\n<ul>\n<li>一度にメモリに読み込むより省メモリでよいかと思ったけど、結局読み込んでからユニークにする処理を入れたりで、あんまり意味がなかった…</li>\n</ul>\n</li>\n<li>\n<p>元々のモチベーションとして、決済機能を補助するものとして作っていて、今回はそのリファインしたもの</p>\n<ul>\n<li>\n<p>amplify 内の Lambda Function で実装していて、src ディレクトリ内をごっそりデプロイする形だったので、Lambda から csv を直接読むような形にしていた</p>\n<ul>\n<li>csv は未ソートだし、ファイルサイズは大きいしで、HTTPリクエスト時にファイル内検索するのはレスポンスが遅くなりすぎる</li>\n<li>よって csv を事前にソートし、さらに郵便番号の頭2桁をキーにファイル分割するようにした</li>\n<li>今考えるとちょっと雑だったかな…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"postalcode_search","previous":{"body":{"body":"- 作ったものはこれ\n    - [fourside/meigaza](https://github.com/fourside/meigaza)\n        - 映画の情報をスクレイプして、 Slack や IFTTT 経由 でモバイル通知する Lambda Function\n    - aws-cdk で Lambda とその周辺の リソースを定義した\n\n### aws-cdk\n- AWSのリソースをコードで表現できるフレームワーク\n- TypeScript で書ける\n    - コード補完が効いてうれしい\n    - パーミッションなどデフォで設定されるので細々定義しなくてよい\n    - CloudFormation で yaml 書くのはつらかった…\n- [What is the AWS CDK? - AWS Cloud Development Kit (AWS CDK)](https://docs.aws.amazon.com/cdk/latest/guide/home.html)\n    - `Getting started` とか読んだ\n- [aws-lambda-nodejs module](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-nodejs-readme.html) が便利\n    - まだ experimental な状態で、さらに semver を採用してない\n    - Lambda のソースコードが TypeScript で書ける\n    - [aws-lambda module](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-readme.html) だと、CDK 部分は ts、Lambda 本体は common js になって、eslint しにくかったりコンテキストスイッチが発生したりで体験がよくない（eslint はディレクトリ毎に設定ファイルを置いても vs code が認識してくれなかった）\n        - なので experimental でも使う…\n\n### puppeteer を動かす\n- [chrome-aws-lambda](https://github.com/alixaxel/chrome-aws-lambda) を [Lambda Layer](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.LayerVersion.html) に含める\n- cdk deploy 時に layer のアセットを作るには以下を参考にした\n    - [AWS CDK を使って node_modules を AWS Lambda Layers にデプロイするサンプル | Developers.IO](https://dev.classmethod.jp/articles/aws-cdk-node-modules-lambda-layer/)\n    - 簡単にいうと、 `bin/{appName}.ts` がスタックを作る前に Layer のアセットとなる資材を作っておく\n- `cdk deploy`, `cdk synth` の度に Layer の元を作るのもコストが大きいので（具体的には`npm install`)、もとになる package-lock.json のハッシュ値を比較して作る作らないを制御するようにした\n\n### aws-lambda-nodejs でローカルでビルドするときのコツ\n- [aws-lambda-nodejs - Local bundling](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-nodejs-readme.html#local-bundling)\n    - parcel を install してると、バンドル時にそれを使ってくれる\n        - ただし [Windows だと無視されるので ](https://github.com/aws/aws-cdk/blob/v1.62.0/packages/%40aws-cdk/aws-lambda-nodejs/lib/bundlers.ts#L31) WSL を使う\n    - そうでなければ Docker が使われる\n- Lambda を複数定義するときは、parcelのキャッシュディレクトリは分ける\n- Layerに含める npm モジュールをバンドルしないようにする\n    - `externalModules` オプションに指定した npm は、[parcel の targets](https://github.com/parcel-bundler/parcel#targets) の `includeNodeModules` オプションに追加される\n\n### misc\n- cdk synth, cdk deploy 中は、package.json が汚れる\n    - Ctrl-Cなどで中断すると残ってしまう\n    - 具体的には parcel のビルドターゲット\n        - `includeNodeModules` には `{npmName}: false` という形で設定される\n        - parcelのドキュメントに記載されてない形なので、正しく動かないのではと思ってしまったけど、そんなことはなかった\n            - [Pull Request #4072 - parcel-bundler/parcel](https://github.com/parcel-bundler/parcel/pull/4072/files#diff-55ff0e36af2108f79d8af002e7dc6841)\n        - 現状、`externalModules` と `nodeModules` どちらに指定しても[結果は同じ](https://github.com/aws/aws-cdk/blob/v1.62.0/packages/%40aws-cdk/aws-lambda-nodejs/lib/bundling.ts#L131)\n- WSLでWindows側のディレクトリを使ってビルドすると遅い\n    - WSL側のファイルシステムを使う\n    - vs code は wsl extension を使う\n"},"title":"aws-cdk の aws-lambda-nodejs で puppeteer を動かす","slug":"aws_cdk_lambda_nodejs_puppeteer","updatedAt":"2020-09-07T04:46:54.210Z"},"next":{"body":{"body":"### 作ったもの\n- [fourside/vanila_scroollspy](https://github.com/fourside/vanila_scroollspy)\n![intersection observable api](//images.ctfassets.net/2zg7j2cy03uu/6Sdv5J3zHP2mead2qgs0q7/081957eaf3b8b3d08f89c343910ece57/intersection_observable_api.gif)\n\n### モチベーション\n- Intersection Observer API を使う処理の素振り\n- サイドメニューの expand / collapse を実装してみた\n- Infinity Scroll の場合は以前試したことがある\n    - [filmemo/useIntersect.ts](https://github.com/fourside/filmemo/blob/develop/src/hooks/useIntersect.ts)\n\n### 参照\n- [Intersection Observer API - Web API | MDN](https://developer.mozilla.org/ja/docs/Web/API/Intersection_Observer_API)\n- [JSでのスクロール連動エフェクトにはIntersection Observerが便利 - ICS MEDIA](https://ics.media/entry/190902/)\n    - オプションについての説明が分かりやすい\n    - やりたかったこと全部ここにあるのよね…\n\n### 素振りについて\n- こういった素振りをする行為は大事だなと思っていて、ちょっと前にやった案件でモーダルを出したくなったとき、以前バニラでモーダル実装したことがあったので、さっと作ることができた\n- なんとなくAPIを知っているくらいの状態だと、いざ必要になったときに調査のフェーズが挟まるし、見積もりも余計にバッファを積んでしまう\n- 一回自分で作っておくと、これくらいの実装で可能だというのが分かるし、最低でも記憶のインデックスになる\n    - 他のライブラリに依存しないで作れると他の環境でも応用しやすい\n- 今回のは CSS アニメーションに手こずったけれどもね…\n"},"title":"Intersection Observer API でサイドメニューの状態変化","slug":"intersection_observer_api","updatedAt":"2020-09-09T09:18:42.352Z"}}},"staticQueryHashes":["2390137347","3000541721"]}