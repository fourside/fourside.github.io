{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/react18",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"React18対応をしました","publishDate":"2022/04/19 13:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"手元の個人プロジェクトで React を v18 にしました。やったことをメモします。 対応ライブラリのバージョンアップ 手元で使っているだいたいのライブラリは18対応されていて、バージョンをあげるだけで問題なく動いた storybook は alpha 版までっぽいので今は見送り React DnD…","html":"<p>手元の個人プロジェクトで React を v18 にしました。やったことをメモします。</p>\n<h2>対応ライブラリのバージョンアップ</h2>\n<ul>\n<li>手元で使っているだいたいのライブラリは18対応されていて、バージョンをあげるだけで問題なく動いた\n<ul>\n<li>storybook は alpha 版までっぽいので今は見送り</li>\n</ul>\n</li>\n<li>React DnD はバージョンアップに伴って ESM のみ提供することになったようなので、テストが動かなくなってしまった\n<ul>\n<li>jest の transform の対象にするために以下の設定を追加した</li>\n<li><a href=\"https://jestjs.io/ja/docs/configuration#transformignorepatterns-arraystring\">jest - transformIgnorePatterns</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">transformIgnorePatterns: [\"/node_modules/(?!react-dnd)/\"],</code></pre></div>\n<ul>\n<li>分かりにくいんだけど、デフォルトで node_modules を無視する設定になっているところに、react-dnd だけ除外する正規表現\n<ul>\n<li>ignore リストに 否定先読みで除外する場合を追加するので、意味的に二重否定になっていて飲み込みにくかった</li>\n</ul>\n</li>\n<li>これを加えるとテスト実行がやたら遅くなる\n<ul>\n<li>100件のテストケースで30秒ほどかかる\n<ul>\n<li>対応前は no-cache で5秒前後</li>\n</ul>\n</li>\n<li>React DnD を使っていないテストでも遅くなるので、おそらく設定に起因する遅さ\n<ul>\n<li>否定先読みが遅いのか、そもそも正規表現が遅いのかは分からない</li>\n</ul>\n</li>\n<li><code class=\"language-text\">--maxWorkers=50%</code> を jest に与えるとやや速くなったけど焼け石に水感はある</li>\n</ul>\n</li>\n<li>jest の ESM 対応が進んでいるみたい\n<ul>\n<li><a href=\"https://github.com/facebook/jest/issues/9430\">Meta: Native support for ES Modules · Issue #9430 · facebook/jest</a></li>\n</ul>\n</li>\n</ul>\n<h2>@types/react の breaking changes</h2>\n<ul>\n<li>以下の PR に詳細があります\n<ul>\n<li><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210\">[react] React 18 types by eps1lon · Pull Request #56210 · DefinitelyTyped/DefinitelyTyped</a></li>\n<li>と思ったけど明示的に書かれてないこともまあまああるな…</li>\n</ul>\n</li>\n<li>変換ツールが提供されています…が結局使わなかった\n<ul>\n<li><a href=\"https://github.com/eps1lon/types-react-codemod\">types-react-codemod</a></li>\n</ul>\n</li>\n</ul>\n<h3>callback の引数の型</h3>\n<ul>\n<li>うっかり忘れてても許されていたのが型エラーになりました。ちゃんと型を指定するだけ。</li>\n</ul>\n<h3>FC から children が取り除かれた</h3>\n<ul>\n<li>暗黙的な <code class=\"language-text\">children</code> を扱えなくなりました\n<ul>\n<li><code class=\"language-text\">FC&lt;Props></code> を <code class=\"language-text\">FC&lt;PropsWithChildren&lt;Props>></code> に書き換えるだけ</li>\n<li>そんなに数がないのでツールに頼らなくてよかった</li>\n</ul>\n</li>\n</ul>\n<h3>VFC が deprecated になった</h3>\n<ul>\n<li>FC が VFC と同じ意味を持つようになった余波かな</li>\n<li>上述の変換ツールには VFC を書き換える機能がなさそうだった\n<ul>\n<li>内部的に jscodeshift という meta 社の OSS を使っているようなので、それを使って単純な書き換えをするものを作ってみた</li>\n<li><a href=\"https://github.com/fourside/react_codemod_vfc_to_fc\">react_codemod_vfc_to_fc</a>\n<ul>\n<li>VFC というトークンを見つけたら、問答無用で FC に書き換えていく</li>\n<li>厳密にやろうと思うと難しくて諦めました\n<ul>\n<li><code class=\"language-text\">function VFC</code> を見つけたら <code class=\"language-text\">function FC</code> になってしまう</li>\n<li>書き換え対象は tsx だし（jscodeshift に指定するパーサは tsx ）コンポーネントにおいて <code class=\"language-text\">VFC</code> という変数や関数を定義することはほぼないので現実的に問題ないはず</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"react18","previous":{"body":{"body":"最近書いたコンポーネントのテストで、よかったこと気づいたことをメモしておきます。主に react testing library を使っていて、それが前提になっています。\n\n### testing library 用の eslint rule が便利\n- [eslint-plugin-testing-library | Testing Library](https://testing-library.com/docs/ecosystem-eslint-plugin-testing-library/)\n  - 「ここではgetByXXXを使うな」とか、要素取得メソッドの矯正をしてくれる\n  - `screen.debug()` もエラーにしてくれるので、消し忘れ防止になる\n  - ただ `targetElement.firstChild` みたいに直接 DOM 取得すると怒られるのは少し不便（その行だけ無効にしてしまってる）\n\n### prop drilling したコールバックのテストがしんどい\n- イベントを発火させて、コンポーネントに渡したコールバックが呼ばれていることを確認するテストを書きたい\n  - イベントを発火するコンポーネントとテスト対象のコンポーネントが分かれているとき、さらにその二者が遠く離れているとき、イベント発火コンポーネントに至るまでの DOM 構造を知っていなければいけない問題がある\n    - 直接の親子なら親は子に依存してるので、少しくらい知っていてもいいかと思うのだけど、孫やひ孫くらい離れていると知りすぎている感があってつらい\n- コンポーネント毎にユニークなtest-idがあればいいのかもしれない\n  - それでも DOM 上での登場順に気を配らなくてはいけないけども\n\n### SWR を使うときはキャッシュに気をつける\n- どう考えてもテスト同士が干渉してる事象があった\n  - テストAで削除のテストをやると、テストBでは削除されたあとの状態になっていた\n- [Cache – SWR](https://swr.vercel.app/ja/docs/advanced/cache#%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E9%96%93%E3%81%AE%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E3%83%AA%E3%82%BB%E3%83%83%E3%83%88)\n  - 回避策はここに書いてあった（読んでたはずだけど、テスト間でキャッシュするなんて思い至らなかった）\n\n### @mswjs/data が便利\n- [mswjs/data](https://github.com/mswjs/data)\n  - [mswjs/data で広がるテスト戦略](https://zenn.dev/takepepe/articles/msw-data-userflow-testing) で知りました\n- msw 単体で使うと取得系のテストは簡単に書けるようになるが、更新系のテストでは工夫が必要で悩んでいた\n  - mswjs/data はその辺の面倒臭さをカバーしてくれるのでありがたい\n\n### React DnD テストしやすい\n- [React DnD](https://react-dnd.github.io/react-dnd/docs/testing) にテストに関する章があるくらいドキュメントがきちんとしている\n  - ただ [test backend](https://react-dnd.github.io/react-dnd/docs/backends/test) を使うのだと勘違いしていて、しばらくハマってしまった\n    - testing-library は DOM を扱うので、通常使う HTML5 backend でよい\n- userEventにdragイベントやdropイベントは実装されてないので、fireEventで扱うしかなかった\n  - [Simulate drag and drop · Issue #440 · testing-library/user-event](https://github.com/testing-library/user-event/issues/440)\n    - 実装する予定もなさそう\n\n### Intersection Observer は jsdom 環境でテストできない\n- [Support for Intersection Observer? · Issue #2032 · jsdom/jsdom](https://github.com/jsdom/jsdom/issues/2032)\n  - jsdom で Intersection Observer が実装されていなかった\n  - ひとまず下記のようなコードで参照エラーになるのを回避して、実際にテストするのは e2e でやるしかないか？ と思ってます\n\n```js\nconst intersectionObserverMock = () => ({\n  observe: () => null,\n  disconnect: () => undefined,\n});\nwindow.IntersectionObserver = jest.fn().mockImplementation(intersectionObserverMock);\n```\n\n- issueを辿っていくとshopifyがmockを実装していた\n  - [quilt/intersection-observer.ts at main · Shopify/quilt](https://github.com/Shopify/quilt/blob/main/packages/jest-dom-mocks/src/intersection-observer.ts)\n\n## 以上です\n"},"title":"コンポーネントのテストを書きました","slug":"component_tests","updatedAt":"2022-04-15T01:11:33.103Z"},"next":null}},
    "staticQueryHashes": ["1784162573","882115108"]}