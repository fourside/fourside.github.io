{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/cloud_bankruptcy_iac",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"「クラウド破産を回避するIaC実践ガイド」を読んでCDKで再実装しました","publishDate":"2020/11/05 03:30:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"クラウド破産を回避するInfrastructure as Code実践ガイド - KOS-MOS - BOOTH 技術書典9で見つけました AWSアカウントをセキュアに使うために、それ用のAWSリソースをTerraformで作成しようという内容 動機 全くノーガードだったものの、ちゃんとしたい気持ちは常にあった AWS…","html":"<ul>\n<li><a href=\"https://booth.pm/ja/items/2366365\">クラウド破産を回避するInfrastructure as Code実践ガイド - KOS-MOS - BOOTH</a>\n<ul>\n<li>技術書典9で見つけました</li>\n<li>AWSアカウントをセキュアに使うために、それ用のAWSリソースをTerraformで作成しようという内容</li>\n</ul>\n</li>\n</ul>\n<h3>動機</h3>\n<ul>\n<li>全くノーガードだったものの、ちゃんとしたい気持ちは常にあった\n<ul>\n<li><a href=\"https://dev.classmethod.jp/articles/aws-1st-step-new-era-reiwa/\">AWSアカウントを作ったら最初にやるべきこと ～令和元年版～ | Developers.IO</a>\n<ul>\n<li>こういうのもブックマークして積んだままになってた</li>\n<li>開発に <em>直接</em> 関係しない部分だし…</li>\n</ul>\n</li>\n<li>とはいえ、毎月AWSにお金を払っているのだし、最低限のことはやっておきたい</li>\n</ul>\n</li>\n</ul>\n<h3>やったこと</h3>\n<ul>\n<li>Terraformで作成されているのを、AWS CDKで再実装\n<ul>\n<li>CDKの勉強にもなるし</li>\n<li>主に10章から18章、22章を対象にした</li>\n<li>作ったリソースは以下の通り\n<ul>\n<li>CloudTrail / AWS Config / GuardDuty / IAM Access Analyzer / Security Hub / Chatbot</li>\n<li>これらに S3 / IAM / SNS らへんを連携させる</li>\n<li>22章では、月額の利用料金をSlack通知する Lambda Function を作成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作成したものはこちら\n<ul>\n<li><a href=\"https://github.com/fourside/cloud-bankruptcy\">fourside/cloud-bankruptcy</a></li>\n</ul>\n</li>\n</ul>\n<h3>やってみて</h3>\n<ul>\n<li>IAMロールらへんの理解が曖昧だったのが、 <em>少し</em> 理解が進んだ</li>\n<li>AWS Config の料金が意外とかかる\n<ul>\n<li>ビジネスで使うなら微々たるものかもだけど、対象ルールが200弱で 1.9 USD/月 くらいになった</li>\n<li>逆にいうと、ほかはほとんどかからないのでやっておくのが得</li>\n</ul>\n</li>\n<li>よくわからないタイミングでGuardDutyから通知がきて怖い…\n<ul>\n<li>Severity: LOW なので放置してしまっているが…</li>\n<li>とはいえ、ちょっとしたことでも通知が来ることによる安心感のほうが大きい</li>\n</ul>\n</li>\n<li>利用料金のSlack通知が便利\n<ul>\n<li>「普段ならこれくらいなのに、今月の予測値が高い」みたいな状況に気付ける\n<ul>\n<li>後始末してなかったEC2リソース(インスタンスやElasticIP)があることに気づけた</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"cloud_bankruptcy_iac","previous":{"body":{"body":"- radikoのxmlをjsonにパースしたくて、npmモジュールの比較をしてみました\n- 前提\n  - ランタイムは Node.js で、ブラウザでの実行は考慮しない\n  - パースの実行頻度はそれほど高くないので、実行速度は気にしない\n  - コンテナに乗せる可能性はある（ファイルサイズやインストールの速度は気にする）\n- 対象はこの3つにした\n    - [xml2js - npm](https://www.npmjs.com/package/xml2js)\n    - [xml2json - npm](https://www.npmjs.com/package/xml2json)\n    - [fast-xml-parser - npm](https://www.npmjs.com/package/fast-xml-parser)\n- 比較したときのコードはこれ\n    - [fourside/choice\\_xml\\_parsers](https://github.com/fourside/choice_xml_parsers)\n\n### TL;DR\n- 悩むけど fast-xml-parser がよさそう\n  - 次点で xml2js\n\n### 比較の軸\n- npm trends\n- 型情報の有無\n- 使用感\n- 出力の比較\n\n### npm trends\n[xml2json vs fast xml parser vs xml2js | npm trends](https://www.npmtrends.com/xml2json-vs-fast-xml-parser-vs-xml2js)\n\n- xml2jsがGitHub starもダウンロード数も圧倒的に多い\n- ファイルサイズも xml2js が小さい\n\n### 型情報の有無\n- fast-xml-parserは自身の型定義を提供してくれている\n- それ以外の2つは@types パッケージがある\n\n### 使用感\n- xml2js\n    - プロミス用のメソッドがあり、若干野暮ったい(`parseStringPromise`)\n- xml2json\n    - インストール時にローカルビルドが走る\n    - パースの結果がJSONの文字列で、`JSON.parse` する必要がある\n- fast-xml-parse\n    - 特になし\n\n### 出力の比較\n\n- 入力は以下のようなラジオ局一覧の xml\n- 結論、出力に関しては、オプション次第でどれも使いやすいJSONが得られる\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<stations area_id=\"JP13\" area_name=\"TOKYO JAPAN\">\n  <station>...</station>\n  <station>...</station>\n</stations>\n```\n\n#### xml2js\n\n- 属性はフラットに表現されるのではなく、オブジェクトとしてまとめて表現される\n    - フィールド名はオプションで変更可能\n- テキストノードはデフォルトで配列で表現されるが、オプションで変更可能\n\n```json\n{\n  \"stations\": {\n    \"attr\": {\n      \"area_id\": \"JP13\",\n      \"area_name\": \"TOKYO JAPAN\"\n    },\n    \"station\": [...]\n  }\n}\n```\n\n#### xml2json\n\n- 特にオプションの指定なく、分かりやすいJSONが得られた\n    - ただしオプションは他の2つに比べて粗い\n- 属性はフラットに親フィールドにぶら下がる（ので、xmlの属性であったかどうかは不可逆）\n\n```json\n{\n  \"stations\": {\n    \"area_id\": \"JP13\",\n    \"area_name\": \"TOKYO JAPAN\",\n    \"station\": [...]\n  }\n}\n```\n\n#### fast-xml-parser\n\n- デフォルトで属性を無視ってきたので驚いたが、オプションで制御可能\n- 属性はフラットに親フィールドにぶら下がる\n    - ただしフィールド名にサフィックスをつけることができる（オプションで空文字を指定することもできる）\n- 下記の出力例には現れてないが、数値のノードはJSONでも数値として表現される（上記2つは `\"1\"` のように文字列になる)\n\n```json\n{\n  \"stations\": {\n    \"area_id\": \"JP13\",\n    \"area_name\": \"TOKYO JAPAN\",\n    \"station\": [...]\n  }\n}\n```\n\n### おわりに\n他に良さそうなのがあれば教えてください"},"title":"XML Parserの比較","slug":"compare_xml_parsers","updatedAt":"2020-10-21T09:25:03.719Z"},"next":{"body":{"body":"日頃から [ghコマンド](https://github.com/cli/cli \"cli/cli: GitHub’s official command line tool\") にお世話になっていまして、PR作ったり、ターミナルからリポジトリをブラウザで開くのに使ったりしているのですが、不意にバナーが出ることで新バージョンがリリースされたことを知ります。そうするとGitHubのcli/cliリポジトリのReleaseページに行き、該当するバイナリを目で選んでダウンロードし、パスに通す。という手間をやっていたのですが、流石に手作業が多すぎると思い、簡単なスクリプトを書きました。\n\n`gist:fourside/ef69da72c47779591ee9ab23af096ea4`\n\n今までちゃんと調べないで使ってたせいで、知らないオプションがいろいろありました。\n\n- `-R` オプションでカレントディレクトリ以外のリポジトリが参照できる\n- JSONのフォーマットで出力できて、さらにjqのような絞り込みができる\n\nupdateサブコマンドの実装案とかissueにないか探してたら、オフィシャルの案内ではパッケージマネージャ経由でバージョンをあげろということみたいですね…。"},"title":"ghコマンドをupdateしたい","slug":"upgrade_gh","updatedAt":"2022-01-26T14:20:23.944Z"}}},
    "staticQueryHashes": ["2390137347","3000541721"]}