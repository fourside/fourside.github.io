{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/simple_server_side_rendering",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"Server Side Renderingしてみました","publishDate":"2022/02/14 13:30:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"やりたいこと 現在運用しているサーバがsinatra + hamlで構成されており、バージョンアップに追従できておらず、普段からrubyを触らなくなってしまったのもあり、機能追加も億劫になっていました。そこでどうせなら Node.jsでサーバサイドを書いてみて テンプレートエンジンは使い慣れているReact…","html":"<h2>やりたいこと</h2>\n<p>現在運用しているサーバがsinatra + hamlで構成されており、バージョンアップに追従できておらず、普段からrubyを触らなくなってしまったのもあり、機能追加も億劫になっていました。そこでどうせなら</p>\n<ul>\n<li>Node.jsでサーバサイドを書いてみて</li>\n<li>テンプレートエンジンは使い慣れているReactを使う</li>\n</ul>\n<p>をやってみよう、の2点です。</p>\n<h2>サーバ</h2>\n<p>最初は <a href=\"https://expressjs.com/\">Express</a> で書き始めたんですが、<a href=\"https://app.stateofjs.com/survey/state-of-js/2021\">State of JavaScript 2021/2022</a> で見かけた <a href=\"https://www.fastify.io/\">Fastify</a> で書き直しました。単純に知らないライブラリを触っておこう、それにパフォーマンスもよいらしいし、くらいのモチベーションです。（最終的にはコンテナに載せるのでfastifyが謳う「ロガーに何々を選びました」という惹句は決め手になりにくいなとは思いました）（が、最初からログがJSON形式なのは今っぽさを感じます）</p>\n<p>触ってみて分かったfastifyのよいところのひとつに、テストが書きやすさがあります。<a href=\"https://www.fastify.io/docs/latest/Guides/Testing/#benefits-of-using-fastifyinject\">Fastify - Testing</a> にある通り、<code class=\"language-text\">inject</code> メソッドで擬似的にHTTPリクエストを送ることができ、簡単にテストが書けます。</p>\n<h2>SSR</h2>\n<p>単純にSSRしたいだけなら <a href=\"https://ja.reactjs.org/docs/react-dom-server.html\">ReactDOMServer – React</a> にあるメソッド群を使えばよいだけでした。<code class=\"language-text\">renderToStaticMarkup</code> は、渡したコンポーネントのレンダリング結果をHTML文字列として返してくれるメソッドです。</p>\n<p>ただ今回返したいレスポンスは、HTMLではなくXMLでした。JSXの型として扱えるのは、@types/reactに定義されてある通りで、HTML要素に存在するものに限られています。当然、xml名前空間で指定されたDTDのことなんてTypeScriptは知らないので、以下のコードをXMLを扱うコンポーネントと同じモジュールに貼り付けて回避しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntrinsicElements</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span>elemName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これでもなお、<code class=\"language-text\">pubDate</code> のようなキャメルケースの要素を扱うと、レンダリング時にreact-domが次のようなwarningを出力します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Warning: &lt;pubDate /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.</code></pre></div>\n<p>これを抑止するには <code class=\"language-text\">NODE_ENV=production</code> を指定して実行すればよさそうです。productionではないテスト実行時などにこのwarningが出力されて鬱陶しいですが、大きな問題にはならないので一旦目をつむることにします。</p>\n<h2>hydration</h2>\n<p>せっかくSSRにしたので、特にユースケースはないけどhydrationも試してみました。単語自体はSSRの文脈で目にするけれども、実際に何が起きているか、どう実装するかというのは全く知らなかったので触れてみるか、というモチベーションです。</p>\n<p>具体的には、<a href=\"https://ja.reactjs.org/docs/react-dom.html#hydrate\">ReactDOMのhydrateメソッド</a> を使います。クライアント用JSファイルのエントリポイントにて、いつもの <code class=\"language-text\">ReactDOM.render(&lt;App />, document.getElementById('root'));</code> ではなく、<code class=\"language-text\">ReactDOM.hydrate(&lt;App />, document.getElementById('root'));</code> とします 。renderと全く同じインターフェイスなので分かりやすいですね。hydrateメソッドによって、クライアント側では改めてDOM構築をせずに、イベントハンドラなどのアタッチ処理が行われるようです。</p>\n<p>ここでAppコンポーネントが何かしらのデータを受け取るインターフェイスになっていたら、クライアント側ではどこからデータを取得すればよいかが悩みポイントでした。例えば何らかのAPIレスポンスをサーバ側では自由に取得できたとして、クライアント側で同様に取得できるか分からないし、できたとしてサーバ・クライアントで二重に取得するのは無駄で無意味です。そこでNext.jsではどうやってるのか調べてみると、SSRしたHTMLの中にJSONデータをシリアライズしたものを埋め込んでいるようでした。つまりクライアント側でそれを取得してJSON.parseできればよいわけですね。愚直な感じはしますが、workはします。</p>\n<p>ここまできたらcss in jsも試してみたいと思って試行錯誤したんですが、SSRするのにビルドが必要そうだったりして簡単にできるのはここまでということにして、ひとまず終わりにします。</p>\n<h2>まとめ</h2>\n<ul>\n<li>普段Next.jsなどで気にせず行われているSSRやhydrateは、身近なAPIでできる（その先がムズい）</li>\n<li>Next.js触りたての頃、windowオブジェクトを評価してビルドがコケることがちょいちょいあったけど、そうなる理由がよくわかりました</li>\n</ul>"}}}},"pageContext":{"slug":"simple_server_side_rendering","previous":{"body":{"body":"日頃から [ghコマンド](https://github.com/cli/cli \"cli/cli: GitHub’s official command line tool\") にお世話になっていまして、PR作ったり、ターミナルからリポジトリをブラウザで開くのに使ったりしているのですが、不意にバナーが出ることで新バージョンがリリースされたことを知ります。そうするとGitHubのcli/cliリポジトリのReleaseページに行き、該当するバイナリを目で選んでダウンロードし、パスに通す。という手間をやっていたのですが、流石に手作業が多すぎると思い、簡単なスクリプトを書きました。\n\n`gist:fourside/ef69da72c47779591ee9ab23af096ea4`\n\n今までちゃんと調べないで使ってたせいで、知らないオプションがいろいろありました。\n\n- `-R` オプションでカレントディレクトリ以外のリポジトリが参照できる\n- JSONのフォーマットで出力できて、さらにjqのような絞り込みができる\n\nupdateサブコマンドの実装案とかissueにないか探してたら、オフィシャルの案内ではパッケージマネージャ経由でバージョンをあげろということみたいですね…。"},"title":"ghコマンドをupdateしたい","slug":"upgrade_gh","updatedAt":"2022-01-26T14:20:23.944Z"},"next":{"body":{"body":"# Spotifyのプレイリストエディタを作りました\n\n## 何を作ったか\nSpotifyのプレイリスト編集アプリです。\n\nSpotifyのDiscover weeklyを聞きつつ（Spotifyがrecommendしてくれる週替りのプレイリストです）、気になった曲をお気に入りに追加して聞き直すという楽しみ方を2年間くらい続けているのですが、それが現在600曲以上になり、特別困ってはいないものの、何らかの基準で別なプレイリストに逃したいな…と思って作りました。\n\n<!-- gif -->\n\nで、こういうときは使ってみたいライブラリを触っていくのも楽しみのひとつで、それぞれ使ってみた感想を書き残します。\n\n## 使ってみたライブラリ\n\nベースはNext.jsです。\n\n- NextAuth.js\n- vanilla-extract\n- React DnD\n- SWR\n- Radix UI\n- Storybook\n- React Testing Library\n- msw\n\n### NextAuth.js\n- [NextAuth.js](https://next-auth.js.org/)\n- 特定プロバイダのOAuth処理をNext.jsに簡単に導入してくれるやつ\n  - プロバイダの数が充実していて、Spotifyもサポートされていた\n    - 正直、プロバイダがひとつくらいなら自前実装でもよいかも\n    - 複数サポートしたいときにメリットを感じられる気がします\n  - (vercelにjoinしてる方が作ってるので安心感はある)\n- 戸惑ったところ\n  - どうやってスコープを渡すのか\n    - ProviderにクライアントIDなど渡す関数にAuthorization URLを生成するところがあり、そこにパラメータとして渡せる\n      - 今となってはドキュメントから参照されてるコードをちゃんと読めば分かったかも\n  - Spotify APIが要求するAccessTokenはどう取れるのか\n    - [Getting Started | NextAuth.js](https://next-auth.js.org/getting-started/example#extensibility)\n      - access tokenは、jwtコールバックに渡されるaccountオブジェクトに、認証完了後にだけ入ってるので、それをtokenオブジェクトに詰め、それが次のsessionコールバックに渡されるのでそこでも詰め直しをする、というたらい回しをした\n      - このまどろっこしさ、これで正しいの？ という疑念はある…\n\n### vanilla-extract\n- [vanilla-extract](https://vanilla-extract.style/)\n- ゼロランタイムのCSSライブラリで、[The State of CSS 2021](https://2021.stateofcss.com/en-US/technologies/css-in-js) で名前を見かけて試しに使ってみようかという感じ\n- CSS ModuleのTypeScript版という感じ\n  - className単位でexportすることになるので、エディタの補完候補がはちゃめちゃに多くなるのが気にならなければ…\n- jest実行時には多分設定が必要で、特に何もしなければCSSは生成されない\n  - この [styleVariants](https://vanilla-extract.style/documentation/styling-api/#stylevariants) がjest実行時にundefinedになってしまい、テストケース内でrenderさせるとエラーが起きてしまう\n  - 結局、回避する手段が分からず、styleVariantsをやめてしまった :cry:\n- スタイルの合成は、通常使う `style` 関数でできる\n    - CSSのオブジェクトも受け取れるし、その配列も受け取れるようになっている。便利。\n- (改めてオフィシャルサイト見てみたら、ジョンレシグ先生のtweetが紹介されてる)\n\n### React DnD\n- [React DnD](https://react-dnd.github.io/react-dnd/about)\n- ReactでDrag and Dropを簡単に扱えるやつ\n- 職場で触る機会があったし、シンプルに使えるので、これを採用した\n  - [react-beautiful-dnd](https://github.com/atlassian/react-beautiful-dnd) もデモがきれいだったしAtlassianが作ってるのかーと好印象だったんだけど、開発を止めてるそうなので見送った\n  - Dragが終わったイベント検知を、Dragが発生した側でハンドルできるのがよい\n    - Dropイベント側で曲の追加をして、Dragイベント側で曲の削除をする\n\n### SWR\n- [データ取得のための React Hooks ライブラリ – SWR](https://swr.vercel.app/ja)\n- fetchのresponseをReactのstateとして扱うやつ\n- 便利なんだけど、以下ちょっとだけ不満点がふたつ\n- useSWRに与える第2引数のfetcherが、第1引数のkeyを受け取ることになっていて不便\n  - キーがそのままリクエスト先のURLパスなら便利なんだけど、fetcherの中でzodでJSONのスキーマチェックなど、URLパス毎に個別の処理を入れたいので、URLパスを受け取れる共通化されたfetcherは作りにくい\n\n```typescript\nconst { data, error } = useSWRImmutable(`playlists/${playlistId}`, () => getPlaylistTracks(playlistId));\n```\n\n- useSWRがloadingを返してくれなくて不便\n  - オフィシャルドキュメントでは、errorとdata(レスポンス)がundefinedなら読み取り中という扱いにしている\n  - ページングをするとき、`useSWR` ではなく `useSWRInfinite` というAPIを使うんだけど、その場合 loading をどう表現したらいいのか？という迷いがあり、結果こうなった\n\n```typescript\nconst { data, error, size, setSize } = useSWRInfinite(getKey, fetcher);\nconst loadingNext = size > 0 && data !== undefined && data.length > 0 && data[size - 1] === undefined;\n```\n  - 「sizeは増えてるけど、data[size]番目のデータはまだ取得されていない」すなわち次ページのloading中ということ\n  - swrで持つ状態が増えるとそこでひとつ最適化をしないといけないはずだから、なるべくシンプルに保つためにloadingを持たない選択をしているのかなという理解をした\n\n### Radix UI\n- [Radix UI](https://www.radix-ui.com/docs/primitives/overview/introduction)\n- まだメジャーバージョンが0なheadless componentライブラリ\n  - focus管理とかキーボード操作とか、見た目以外のアクセシビリティを提供してくれるやつ\n  - GitHub Trendingでもよく見かける\n- Dialog(いわゆるモーダル)などを触ってみたけど、ちょいクセを感じた\n  - Triggerというコンポーネント（こいつはDialogを開閉するボタン）を含めないと、ESCキーでDialogを閉じれなかったりする\n- Scroll AreaのスクロールバーがDOMで実装されていてこれが欲しかったんだけど、heightが固定じゃないとスクロールバーが出てくれなくて悲しかった（何故かは追ってない）\n\n### Storybook\n- [Storybook](https://storybook.js.org/)\n- 厳密には仕事で少し触ったことはあるけど、きちんと使いこなせてはいなかった\n- なにより連れてくるnpmモジュールの多さにちょっと引き気味だったのと、連れてくるやつのせいでnpm auditが消えないがちなので、ちょっと及び腰だった\n- 使ってみるとシンプルな記述で、カタログ的にコンポーネントの見た目が確認できるのはすごくうれしい\n- コンポーネントの機能だけ先に作ってから、storybookを用意して、コンポーネントが持つパターン毎にスタイルを当てる、という流れで作業できた\n  - ローディングとかエラー状態とか動作確認しにくいコンポーネントが確認できるのはうれしい\n  - (余談ですが、仕事では一部 [React Cosmos](https://reactcosmos.org/) という軽量なやつを使っていて、これはこれでシンプルでよいです)\n- Storybookが用意しているドキュメントがしっかりしていて分かりやすいというのもよい\n\n### React Testing Library\n- [React Testing Library | Testing Library](https://testing-library.com/docs/react-testing-library/intro/)\n- Reactのコンポーネント自体をテストしたことがあまりなく、これも及び腰だったので試してみたけど、これもよかった\n  - Reactの内部ではなく、実際にユーザーが体験することに対して関心があるテストが書けるようになっている\n  - enzymeの置き換えになるというのがセールスポイントとしていたんだけど、かなり昔にちょろっと触った程度なので面倒臭さは忘れてしまった…\n    - 確かにセットアップは簡単だった\n- 表示のテストはStorybookでやる（手作業になるけど）一方で動作の確認はReact Testing Libraryでカバーという棲み分けも分かりやすくてよい\n- 単項目のシンプルなフォームに対して書いたテストケースは20個くらい書いた\n  - なるべくアサーションルーレットにならないように気をつけた結果の数なんだけど、思ったより少ないか\n  - 必須項目のエラーをいつ出すかとか、ラベルをクリックしてフォーカスが移るかとか、enterでもボタンクリックでもsubmitできるかとか、挙動をテストしたい項目はそれなりにあって、これがテストで書けるのはかなり安心感を得られてよい\n    - 実際テストが通らず、バグが直せたのも体験よかった\n\n### MSW\n- [MSW](https://mswjs.io/)\n- http通信をinterruptしてモックデータを返すやつ\n- このアプリがほぼ出来上がってから使い始めたので、全エンドポイントにモックデータを用意するのがダルくて、ちゃんとやれてない\n  - mswで定義してないエンドポイントに対してリクエストがあったとき、サーバコンソールにログが出てしまったり、socketが中途半端な状態になるのかエラーになったりしがちだった\n  - Intersection ObserverでInfinite loadingを実装するとき、リクエストが多数発生してSpotifyから429が返ってきてしまったことがあり、そのときモックデータが役に立ちました\n- Storybookやユニットテストで使えたら便利そう(まだ使えていない)\n\n## その他やったこと\n- ディレクトリの切り方は [SPA Componentの推しディレクトリ構成について語る](https://zenn.dev/yoshiko/articles/99f8047555f700) を参考にしました\n- 主に、components以下を model と ui に分けるやり方\n  - 最初は model と ui に分けなくても十分秩序あるように感じれたのだけど、Radix UI を使い始めてから ui のあり方だけに関心を持つコンポーネントが生まれ始め、分けるタイミングを感じた\n  - そしてtestやstorybook、cssも別ファイルで分かれるので、コンポーネントにべったりなhooksも外に出したりした\n\n## やらなかったこと\n- hooksのテスト\n  - それ用のライブラリである [React Hooks Testing Library](https://react-hooks-testing-library.com/) を見つけて、よしと思ったんだけど、`Your hook is defined alongside a component and is only used there` とあり、コンポーネント本体のテストでカバーすべきかと思い直したので\n\n## 難しかったこと\n- lighthouseを実行し、html形式のレポートをgh-pagesにデプロイする\n  - Spotifyの認証画面から先がpuppeteerが不安定、だいたいいつもタイムオーバーになる\n  - そのせいでログイン試行がかさみ、Spotifyから疑わしい行動があったとしてパスワードリセットされてしまった\n  - 無事htmlがデプロイされたとしても、githubのリポジトリが検出するlanguageがhtmlになってしまって若干悲しい\n- またlighthouseは型定義をきちんとした形で提供してくれておらず、definitely typedも存在しないので、どうにか誤魔化すしかなく、そこも面倒くさいポイントではあった\n\n# 終わりに\n以上です(これも余談ですが、一旦人に見せると満足してしまって開発意欲が減ってしまいますね、見せないで悶々と作って行くほうがいいのか？)\n"},"title":"Spotifyのプレイリストエディタを作りました","slug":"spotify_playlist_editor","updatedAt":"2022-03-10T13:39:17.359Z"}}},
    "staticQueryHashes": ["1784162573","882115108"]}