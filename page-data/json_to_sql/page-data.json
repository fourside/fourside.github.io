{"componentChunkName":"component---src-templates-blog-post-js","path":"/json_to_sql","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"JSON から SQL を生成しました","publishDate":"2020/09/28 13:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"fourside/sqlgen-cli なにをするやつ JSON から INSERT 文や DELETE 文を出力します なぜ作ったのか 元ネタは過去にやった案件で、簡単に書いたテストのヘルパーの焼き直し テスト用のデータの作成 たまたま MySQL だったので、bulk insert の形にしている cli…","html":"<ul>\n<li><a href=\"https://github.com/fourside/sqlgen-cli\">fourside/sqlgen-cli</a></li>\n</ul>\n<h3>なにをするやつ</h3>\n<ul>\n<li>JSON から INSERT 文や DELETE 文を出力します</li>\n</ul>\n<h3>なぜ作ったのか</h3>\n<ul>\n<li>\n<p>元ネタは過去にやった案件で、簡単に書いたテストのヘルパーの焼き直し</p>\n<ul>\n<li>テスト用のデータの作成</li>\n<li>たまたま MySQL だったので、bulk insert の形にしている</li>\n<li>cliの形式を取ってはいるけど、完全に自分用であまり柔軟には作っていない</li>\n</ul>\n</li>\n<li>\n<p>難しいことは一切していない</p>\n<ul>\n<li>外部参照制約での値の決定とか…</li>\n<li>DELETE 文も参照関係を考慮していないので、INSERT 文を生成してる順番を逆にしてるだけ</li>\n</ul>\n</li>\n<li>TypeScriptファイルにJSON定義しているので、デフォルト値や日時の生成など動的に値を決定できるのが便利ポイント</li>\n<li>\n<p>わざわざ書き直したのは、触ったことのないライブラリを使ってみたいというモチベーションもある</p>\n<ul>\n<li>いずれもちょろっとしか触れてないので、そんなに何か言えることはない…</li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://github.com/iamkun/dayjs\">dayjs</a></h4>\n<ul>\n<li>軽量、Dateのprototypeも汚染しない、npm trendsみても結構流行ってる</li>\n<li>utcが素のままで使えなかったのは少し驚いたけども、デフォルトで入ってるプラグインを通せば大丈夫</li>\n<li>型定義も元から入ってるの安心感ある</li>\n</ul>\n<h4><a href=\"https://github.com/yargs/yargs\">yargs</a></h4>\n<ul>\n<li>cli parserのcommanderは以前使ったことがあったので、別のやつ</li>\n<li>悪くない、次どっち使うかは迷う</li>\n</ul>\n<h4><a href=\"https://github.com/avajs/ava\">ava</a></h4>\n<ul>\n<li>年末のsurveyとかで見かけるテストライブラリ</li>\n<li>jestだとリッチすぎるかなーというときmochaを選ぶけど、これでもよさそうな感じはする</li>\n<li>TypeScriptで使うとき <a href=\"https://github.com/avajs/ava/blob/master/docs/recipes/typescript.md\">多少の設定</a> が必要だった</li>\n</ul>\n<p>以上です。</p>"}}}},"pageContext":{"slug":"json_to_sql","previous":{"body":{"body":"これです\n- [Redux Toolkit | Redux Toolkit](https://redux-toolkit.js.org/)\n\n### なぜ使おうと思ったか\n- この辺を読んで「入れてもいいかな」から「やってみよう」になった(なるべくデフォルトで作って余計なものを入れたくない気持ちが邪魔をしていた)\n    - [TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話 | フューチャー技術ブログ](https://future-architect.github.io/articles/20200501/)\n    - [りあクト！ TypeScriptで始めるつらくないReact開発 第3版【Ⅲ. React応用編】 - BOOTH](https://oukayuka.booth.pm/items/2367992)\n- Redux + TypeScript だと確かにコード量が多くなり、自分のアプリケーションでもアクションの型定義で200行近く、アクション自体で300行超だったので見通しが悪かった\n\n### 進め方\n- Redux Toolkit に tutorial があるのでそれを読んで、実際にコードの置き換えをしていくだけ\n    - [Basic Tutorial | Redux Toolkit](https://redux-toolkit.js.org/tutorials/basic-tutorial)\n    - Basic => Intermediate => Advanced と段階があるけど、Advanced までやらないと非同期の処理が出てこないので最後までやる\n- redux toolkit をインストールすると、redux/redux-thunk が一緒に入ってくるので、最初から toolkit を使うのが便利かもしれない（ただし redux のバージョンがちょっとだけ古い）\n\n### 結果\n- 実際にコード量が減った\n    - https://github.com/fourside/filmemo/pull/29\n        - `+586 -790`\n    - slice (action + reducer なオブジェクト)を作ると、action creator を用意せずに済むのがうれしい\n    - 結果 actions.tsとその型情報を全部消せた\n- コードの見通しがよくなった\n    - reducer は reducer.ts に、 action は actions.ts に、というようにしていたところ、子の state 毎に features/xxx といったディレクトリを切って、そこに reducer/action を収めるようにした\n    - tutorial の通りに進めると、ある程度自然と [Redux の Style Guide](https://redux.js.org/style-guide/style-guide) の通りになるので安心感がある\n        - この安心感のおかげで、redux に対するうっすら苦手意識みたいなのはなくなった\n- 使った API は `createSlice` `configureStore` くらいで、簡単に導入できる\n    - あとで `createSelector` も触っておく\n\n### 悩んだところ\n\n#### reducer の中で state を mutate してるかのようなコードを書くこと\n- [Intermediate Tutorial | Redux Toolkit](https://redux-toolkit.js.org/tutorials/intermediate-tutorial#mutable-update-logic)\n    - redux toolkit の中で immer.js を使っており、実際には mutate しない動作になるとのこと\n    - 通常の reducer では更新しない項目まで面倒みないといけないので、意図が分かりにくいコードになる\n- 知らないとびっくりされそうなポイントだなと思ったが…\n    - redux toolkit のAPIに渡すものの中でやることなので、一度知ってしまえば混同することはなさそう\n\n#### 非同期なアクション(thunk action)の戻り値が欲しいときがある\n- dispatch(someAsyncAction()) は promise を返すわけではなし、reduxの管理するstateから実行結果を得るしかない\n- containerをかませればできるのだけど、できれば redux の hooks を使いたい\n- 以下、個別のケースを2つ\n\n##### 認証のリダイレクト後に未認証、認証のチェックをしたい\n- 未認証ならサインイン画面に飛ばすとかやりたいんだけど、初期値の状態を経て認証状態になるので、単純に任意の値がfalsyかどうかで判断できない\n- `authed | unauthed | unknown` みたいな3値で判定するようにした(ここでの unknown は、SQL での null は未定を意味するみたいな発想)\n\n##### form送信して成功/失敗のチェック\n- 成功したら画面遷移などさせたいし、失敗したら留まって欲しい\n- 結果を redux で管理する？\n    - だとして、結果をクリアするタイミングとかエンバグしそうな箇所を作りたくない\n- とりあえず、成功時の処理をコールバックとして thunk action に渡すようにした\n    - これはあんまりよくないやり方だと思う…ので、thunk action を使わず、カスタムフックを作ってそこでプレーンなアクションを dispatch するのがきれいなように思える\n\n### 最後に\nbundle サイズどれだけ変わったか。\n\n```bash\nFile sizes after gzip:\n\n  241.45 KB (+6.08 KB)  build\\static\\js\\4.d246d372.chunk.js\n  54.38 KB (+11 B)      build\\static\\js\\5.c7a89df4.chunk.js\n  9.4 KB (-3 B)         build\\static\\js\\0.cba94f39.chunk.js\n  6.04 KB (+164 B)      build\\static\\js\\main.b9447786.chunk.js\n  3.07 KB (+5 B)        build\\static\\js\\6.b4b32cf6.chunk.js\n  3.05 KB (-19 B)       build\\static\\js\\8.f62b749c.chunk.js\n  2.35 KB (+6 B)        build\\static\\js\\7.be5a358d.chunk.js\n  1.23 KB (+1 B)        build\\static\\js\\runtime-main.681aaec9.js\n  731 B (-1 B)          build\\static\\js\\1.816b4f1d.chunk.js\n  443 B (+3 B)          build\\static\\js\\9.1e585942.chunk.js\n  304 B                 build\\static\\css\\main.ed9b3d4b.chunk.css\n```\n\nおおよそ6KBの増加。これを許せるかどうかはプロジェクトに依るだろうな。とはいえ保守性に関わるのでできれば使いたいなと思います。\n"},"title":"Redux Toolkitの感想","slug":"redux_toolkit","updatedAt":"2020-09-25T04:57:01.044Z"},"next":null}},"staticQueryHashes":["2390137347","3000541721"]}