{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentful":{"edges":[{"node":{"title":"aws-cdk の aws-lambda-nodejs で puppeteer を動かす","slug":"aws_cdk_lambda_nodejs_puppeteer","body":{"body":"- 作ったものはこれ\n    - [fourside/meigaza](https://github.com/fourside/meigaza)\n        - 映画の情報をスクレイプして、 Slack や IFTTT 経由 でモバイル通知する Lambda Function\n    - aws-cdk で Lambda とその周辺の リソースを定義した\n\n### aws-cdk\n- AWSのリソースをコードで表現できるフレームワーク\n- TypeScript で書ける\n    - コード補完が効いてうれしい\n    - パーミッションなどデフォで設定されるので細々定義しなくてよい\n    - CloudFormation で yaml 書くのはつらかった…\n- [What is the AWS CDK? - AWS Cloud Development Kit (AWS CDK)](https://docs.aws.amazon.com/cdk/latest/guide/home.html)\n    - `Getting started` とか読んだ\n- [aws-lambda-nodejs module](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-nodejs-readme.html) が便利\n    - まだ experimental な状態で、さらに semver を採用してない\n    - Lambda のソースコードが TypeScript で書ける\n    - [aws-lambda module](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-readme.html) だと、CDK 部分は ts、Lambda 本体は common js になって、eslint しにくかったりコンテキストスイッチが発生したりで体験がよくない（eslint はディレクトリ毎に設定ファイルを置いても vs code が認識してくれなかった）\n        - なので experimental でも使う…\n\n### puppeteer を動かす\n- [chrome-aws-lambda](https://github.com/alixaxel/chrome-aws-lambda) を [Lambda Layer](https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-lambda.LayerVersion.html) に含める\n- cdk deploy 時に layer のアセットを作るには以下を参照した\n    - [AWS CDK を使って node_modules を AWS Lambda Layers にデプロイするサンプル | Developers.IO](https://dev.classmethod.jp/articles/aws-cdk-node-modules-lambda-layer/)\n    - 簡単にいうと、 `bin/{appName}.ts` がスタックを作る前に Layer のアセットとなる資材を作っておく\n- `cdk deploy`, `cdk synth` の度に Layer の zip を作るのもコストが大きいので、もとになる package-lock.json のハッシュ値を比較して作る作らないを制御するようにした\n\n### aws-lambda-nodejs でローカルでビルドするときのコツ\n- [aws-lambda-nodejs - Local bundling](https://docs.aws.amazon.com/cdk/api/latest/docs/aws-lambda-nodejs-readme.html#local-bundling)\n    - parcel を install してると、バンドル時にそれを使ってくれる\n        - ただし [Windows だと無視されるので ](https://github.com/aws/aws-cdk/blob/v1.62.0/packages/%40aws-cdk/aws-lambda-nodejs/lib/bundlers.ts#L31) WSL を使う\n    - そうでなければ Docker が使われる\n- Lambda を複数定義するときは、parcelのキャッシュディレクトリは分ける\n- Layerに含める npm モジュールをバンドルしないようにする\n    - `externalModules` オプションに指定した npm は、[parcel の targets](https://github.com/parcel-bundler/parcel#targets) の `includeNodeModules` オプションに追加される\n\n### misc\n- cdk synth, cdk deploy 中は、package.json が汚れる\n    - Ctrl-Cなどで中断すると残ってしまう\n    - 具体的には parcel のビルドターゲット\n        - `includeNodeModules` には `{npmName}: false` という形で設定される\n        - parcelのドキュメントに記載されてない形なので、正しく動かないのではと思ってしまったけど、そんなことはなかった\n            - [Pull Request #4072 - parcel-bundler/parcel](https://github.com/parcel-bundler/parcel/pull/4072/files#diff-55ff0e36af2108f79d8af002e7dc6841)\n        - 現状、`externalModules` と `nodeModules` どちらに指定しても[結果は同じ](https://github.com/aws/aws-cdk/blob/v1.62.0/packages/%40aws-cdk/aws-lambda-nodejs/lib/bundling.ts#L131)\n- WSLでWindows側のディレクトリを使ってビルドすると遅い\n    - WSL側のファイルシステムを使う\n    - vs code は wsl extension を使う\n","childMarkdownRemark":{"excerpt":"作ったものはこれ fourside/meigaza 映画の情報をスクレイプして、 Slack や IFTTT 経由 でモバイル通知する Lambda Function aws-cdk で Lambda とその周辺の リソースを定義した aws-cdk AWS…"}},"publishDate":"2020/09/07"}},{"node":{"title":"Gatsby + Contentful on GitHub Pages","slug":"gatsby_contentful_gh_pages","body":{"body":"\nfourside.github.io を jekyll で構築していたけど、gatsby に鞍替えした。モチベーションは gatsby を触ってみたかったというくらい。\n\n### やったこと\n\nなるべくシンプルにしたかったので、オフィシャルのスターターである [gatsbyjs/gatsby-starter-blog](https://github.com/gatsbyjs/gatsby-starter-blog) を使った。とはいえSEOとかオフライン対応とかもろもろ入っているので便利。\n\n自分でカスタマイズしたのはこれくらい。移行元となるべく機能差異ないようにした（そんな機能もりもりじゃないけども…）。基本的にプラグインを入れて設定をするだけ。\n\n- 自分のアイコンは Gravatar からひっぱってきた\n- Gist を展開するようにした\n- RSS feedを吐くようにした\n- 自動でデプロイされるようにした\n\n自動デプロイについて。Contentful で publish したら走るようにした。 jekyllだと mdファイルをpushしたらGitHub Pagesが自動でビルドしてくれるが、Gatsby + Headless CMS だと、ビルド時に CMS から記事を取得しなくてはならない。具体的には Contentful Webhook と GitHub Actions の組み合わせ。Contentful で記事を操作したら GitHub API にリクエストが飛ぶようにする([Webhooks | Contentful](https://www.contentful.com/developers/docs/concepts/webhooks/))。GitHub Action で、そのリクエストが飛んできたらビルドとデプロイが走るようにする。\n\n~~デプロイは、[gh-pages](https://www.npmjs.com/package/gh-pages) を使うだけ。GitHub Pagesのブランチを `gh-pages` にしておいて、ビルド成果物だけを push する。~~ GitHub Actions では [peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token) を使うようにした（直接 gh-pages を使うと `fatal: empty ident name (for <runner@fv-az60.xxxxxxxxxxxxxxxxxxxxxxxxxx.cx.internal.cloudapp.net>) not allowed` なんて怒られてしまう。これには workflow 内で自動生成される GITHUB_TOKEN が必要らしいのだけど、便利な action ([peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages))があるので使わせてもらった。）\n\nGitHub Actions のドキュメントは以下を参照した。日本語版だとデッドリンクがあったりURLのフラグメントが設定されてなかったりする。余談だけどドキュメントの規模が大きくなったとき、一部だけ見て理解できるようにコンテキストを少なくして作成できたらいいだろうなと思うものの、もともとボリュームが大きいのでできるだけスリムに書きたいとも思うし、塩梅は難しいな。\n\n- [Events that trigger workflows - GitHub Docs](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch)\n    - `repository_dispatch` イベントを発生させるとworkflowをキックできるみたい\n- [Repositories - GitHub Docs](https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event)\n    - 上記イベントを発生させる GitHub API\n- [Creating a personal access token - GitHub Docs](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)\n    - 外部サイトの Webhook に与える認証について\n    - 一年で revoke されるっぽいので、ブログ更新を一年サボると動かなくなる\n    - 今回は repo > public_repo でよい\n    - その乗せ方\n        - [Resources in the REST API - GitHub Docs](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#oauth2-token-sent-in-a-header)\n- [GitHub API v3 | GitHub Developer Guide](https://developer.github.com/v3/#user-agent-required)\n    - GitHub APIは、User-Agent ヘッダがないとエラーになるみたい。なんか適当なのを入れておく\n\n### misc\nそれぞれ触ってみての感想\n\n#### Headless CMS\nなんで Headless CMS にしたか。ローカルにファイル作ってもいいかとも思ったけど、知らないものは触っておくことにした。後付で理由も考えてみたけど…。\n\n- jekyllの場合\n    - ディレクトリやファイル名で記事のURLが決まる。面倒くさい\n    - リポジトリが手元にある必要がある\n- Headless CMSの場合\n    - Webフォームで入力する。そこまで面倒じゃない\n        - 画面開いてログインするのは面倒くさい\n    - ブラウザがあればpublishできるのでポータビリティはある\n    - Headless CMSのほうが記事を書くための心理的障壁が下がるかなと思う。\n\n#### Contentful\n- UIの分かりやすさはある。探してるものがすぐ見つかる\n    - 編集画面はちょっと狭くて好きではない\n    - publishDate、デフォで現在時刻を入れてて欲しい\n- Firefox だとコンソールにエラーがでまくってて、そのせいか vim-vixen が動かず、そこが不満ではある…\n- 他にもさらっと候補を調べてみたけどそこまで時間かけなくていいかと思った程度\n\n#### Gatsby\n- tutorial 分かりやすい。React を触ったことがあればすいすい進む\n- GraphiQL がついてくるので、クエリの結果を確かめるのが簡単\n- plugin をもりもり入れる\n  - gatsby-config.js が太るし、ここに Graphql のクエリを書く場合もあり、リッチなものを作ろうと思ったらつらくなりそう\n- Markdown ファイルと Contentful を併存させようとして遭遇したエラーがちょっと分かりにかった\n  - 結局 Markdown は Contentful に手作業で移行した…\n","childMarkdownRemark":{"excerpt":"fourside.github.io を jekyll で構築していたけど、gatsby に鞍替えした。モチベーションは gatsby を触ってみたかったというくらい。 やったこと なるべくシンプルにしたかったので、オフィシャルのスターターである gatsbyjs/gatsby…"}},"publishDate":"2020/09/02"}},{"node":{"title":"作ったものの説明","slug":"desc_repo","body":{"body":"- 今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。\n- 就職活動でGitHubのURLを乗せても、READMEに書くのは簡単な説明と使い方くらいなので分かりにくいと思うので…。\n    - 主に「なぜ作るのか」、「何を学んだか」\n    - 基本的には、自分の問題を解決するため\n        - 次に、興味のあるライブラリなどを試すため\n\n## [ie-ignore-slide](https://github.com/fourside/ie-ignore-slide)\n- スライドのライブラリ\n- polyfill使えばいいのだけど完全に個人用なのでIEを無視することに\n\n#### 背景\n- パワーポイントを使いたくなさすぎて自作した\n\n#### 学んだ技術\n- WebComponents\n    - 当時ようやくFirefoxで使えるようになったのと、技術書典でWebComponentsの本を買ったことが理由\n\n#### 工夫\n- 地味にプログレスバーを用意してLTに便利なようにしてる\n\n#### 改善点\n- CSSアニメーションをもっとスライドらしくしたい\n- コンポーネントにあてるCSSをきれいに書けずもどかしい\n- npm publishしたほうが使いやすい\n\n## [podcast](https://github.com/fourside/podcast)\n\n- 録音したものをpodcast形式で配信するアプリケーション\n- だいぶ前に作っていて今でもずっと使い続けており、最近コンテナ化した\n\n#### 背景\n- ラジオが好きなので個人用のアーカイブ\n\n#### 学んだ技術\n- docker\n    - もともと素朴に作っていたものをコンテナ化した\n    - そうすることでミドルウェアの設定などもgitで管理できるようになり、ポータビリティが得られた\n    - logging driverでログ収集することでfluentdクライアント不要になるところがよい\n\n#### 工夫\n- docker-compose.ymlを開発用と本番用に分けたところ\n    - 本番用にはfluentd/mongodbを足して、ログの集積をしている\n\n#### 改善点\n- 集積したログを閲覧・検索したり、監視したりする仕組みを用意したい\n\n## [videoserver](https://github.com/fourside/videoserver)\n- youtubeから動画をダウンロードしてpodcastとして配信する\n\n#### 背景\n- テック系の動画を通勤中に見れるように\n- podcastとして管理すると未読管理が楽になる\n- 結局はmusic videoがメインになってしまった\n\n#### 学んだ技術\n- バックエンドはgolang\n    - goroutine, channelの基本的な使い方\n    - パッケージ管理はいろいろ変遷があったようだがdepを使うようにした\n    - ビルドにはmakeを使い、静的解析をするようにした\n- フロントエンドはreact\n    - 途中でhooksに書き換えてみたり、reduxに入門したりした\n    - ビルドツールはparcelにした\n        - 勝手に必要なものが裏で揃えられるので楽だけど、たまにうまく行かなくなるときがある…\n        - 小さく始めるときの最初のビルドツールとして最適だと思った\n    - web workerも使ってみた\n\n#### 工夫\n- polling処理でダウンロードの進捗表示をするところ\n    - バックエンドはgoroutineからyoutube-dlの標準出力を抜き取ってレスポンスを返す\n    - フロントエンドはWebWorkerでサーバリクエストを送り、メインスレッドにサーバレスポンスの一部を返す\n\n#### 改善点\n- 削除APIができていない\n    - DBを使ってない（ファイルシステムを直接見てレスポンスを作っている）ので、一意にしにくい\n- reduxを使い始めたが、きちんと理解した感じがしない\n    - ミドルウェアまで入れたくない気持ちがあるが実際はどうなのか\n- 字幕情報をダウンロードできるのだが、動画に埋め込むとき字幕表示がきれいではない\n\n## [meigaza](https://github.com/fourside/meigaza)\n- スクレイピング結果をslackやスマホに通知してくれるスクリプト\n\n#### 背景\n- 映画をよく見るようになった\n    - 東京にある名画座のスケジュールを簡単に知りたくなった\n    - 気づいたら前売り券を買える期間が過ぎていた\n\n#### 学んだ技術\n- puppeteerによるスクレイピング\n- aws lambdaのカスタムランタイム\n- iftttでの通知\n\n#### 工夫\n- 最初は常駐型のボットを実装しようと思ったが、スケジュールでキックされるAWS Lambdaで実現できたこと\n\n#### 改善点\n- cliでデプロイできるようにしたい\n\n## [mock-server](https://github.com/fourside/mock-server)\n- リクエストパスとサーバローカルのファイルをマッピングするサーバ\n\n#### 背景\n- フロントエンド(SPA)の開発でモックサーバが欲しくなった\n    - 特にページャの実装で、特定のクエリ文字列を含むURLのとき、それっぽいJSONを返してほしい\n    - nginxのlocationはクエリまで含めて判定してくれない\n    - 軽く探しても欲しい物はなさそうだったので、自分で書くことにした\n\n#### 学んだ技術\n- node.jsでのサーバの書き方\n\n#### 工夫\n- ライブラリを使わないようにnodeのapiだけで作ってみた\n    - 使うときnpm installする必要がなくなって、シンプルなものになった\n- 普通に作ると起動時だけ設定ファイルを読むように作るが、フロントエンドの開発をしやすいようにリクエストの度に設定ファイルを読むようにした\n\n#### 改善点\n- typescript化\n- テストがない\n    - ルーティング定義のファイルを実行時引数で渡せるようにしないとな…\n- 公開ディレクトリに置かれたファイル（webpackなどのビルド成果物）の変更検知して、ブラウザをリロードしたい\n\n## [modal_sample](https://github.com/fourside/modal_sample)\n- よくあるモーダル画面のサンプル実装\n\n#### 背景\n- 仕事でモーダル画面が必要になったがライブラリを使わず実装したかった\n\n#### 学んだ技術\n- よくあるモーダルの実装方法\n    - 世の中のモーダルはどう実装されているのか、いろいろ調べてみるとだいたい同じだったのでそのように実装した\n- cssアニメーションの基礎\n\n#### 工夫\n- ライブラリを使わずvanillaに作ること\n- WindowsのインターネットオプションによってIEではlocalStorageが無効にできるので、Nullオブジェクトを用意した\n\n#### 改善点\n- 特になし\n\n## [elecron](https://github.com/fourside/elecron)\n- 指定したスケジュールで任意のURLを開く常駐アプリ\n\n#### 背景\n- 物理的な勤怠打刻からWebの打刻に移行した際、打刻を忘れてしまうという話を聞いた\n    - 出退勤の時間になったらブラウザで打刻用のサイトを開くアプリを作ろうと思った\n\n#### 学んだ技術\n- electron\n- vue\n- webpack\n\n#### 工夫\n- windows向けに作ったのでappveyorを使ってみた\n\n#### 改善点\n- cronの書式が分かりにくい（がパターンの表現力は高いので、完全に置き換えるものは思いつかず…）\n- コンポーネントが大きいので分割したい\n    - 1個のFormを分割するのは冗長な部分が増えそうで躊躇してしまう\n","childMarkdownRemark":{"excerpt":"今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。 就職活動でGitHubのURLを乗せても、README…"}},"publishDate":"2019/08/13"}},{"node":{"title":"Java Day Tokyo 2018","slug":"javadaytokyo2018","body":{"body":"メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracleアカウント、個人のやつだしね…。\n\nメモと感想です(後でスライドが公開されるだろうけど)。\n\n## key note\n- リリースモデルについて、わかりやすいけどOpenJDKはLTS出ないのね\n- jdk11が今年9月に出る(予定通り)\n    - JEPsはこれからも追加される\n- mission controll と flight recorder\n    - Eclipse pluginで開けて便利\n        - 下部のペインにスタックトレースからコードにジャンプできる\n    - パフォーマンスの問題3例での見え方\n        - LinkedListのループ内のget\n        - シングルトンインスタンス(ロガーとか)\n            - これどういうシチュエーションの問題だっけ\n        - ループ内でオートボクシングが発生しててGC走りまくってる\n            - 赤いアイコン出ないので問題なさそうに見えるので注意\n                - どう気づけばいいんだ？\n- リリース未定だったりする新しい機能\n    - Valhalla\n    - Portola\n    - Panama\n    - Amber\n    - Loom\n    - ZGC\n- fn\n    - サーバレス\n    - cli\n        - ボイラープレートを吐いたり\n        - ローカルサーバ起動できたり\n            - 個人的にこれがすごく良いと思う\n        - アプリをデプロイできたり\n    - javaで単一の処理で書けてしまうが、裏では複数のコンテナが実行されてるやつのデモ\n        - flickrから車の写真を集めてきて最終的にslackにポストしまくる\n\n## Java in a Wolrd of Containers\n- 翻訳レシーバの付け方がわからなくて英語で聞いてみたけどやっぱり翻訳必要だな…\n- jlink, jdeps\n- musl libc\n- portola\n- AppCDSでコンテナ間のクラスデータのシェア\n- Dockerの設定を考慮するJava起動オプションのサポート\n- 適切なbase imageを使うとサイズの軽量化できる\n\n## Project Valhalla\n- Value Types\n- Generics Specialization\n- Var Handles\n\n- 名前の由来\n    - Value Typesと似てるっしょ\n- シンタックス\n    - 例えばこんなの\n    - ```value class Hoge { } ```\n- クラスのように書けてプリミティブのように振る舞う\n    - ヘッダがない\n        - オブジェクトのメタ情報\n            - 何のインスタンスなのかとか\n    - モニタがない\n        - ロックの情報\n    - キャッシュミスしない\n        - これはどういう理屈だっけ…\n    - \"What Would Int Do\"\n- ジェネリクス\n    - どう扱えるの？\n    - `List<int> list = ...`\n- IntStreamとかToIntFunctionとかなくせる\n- クラスの継承ツリー\n    ```\n    -- any(仮)\n     |- primitive(int/long/...)\n     |- Object\n          | - ...\n    ```\n    - このany(仮)をバイトコードでどう表現するのとか悩んでるらしい\n- VarHandles\n    - Unsafeで扱えたメモリ操作ができる\n- 余談\n    - メモリバリア\n    - volatile\n        - この辺理解できてない\n\n## Curing you Domain Model Anemia...\n- DDDに触れてからのコードスメル\n    - フォーカスする話題の粒度が真逆というか振り幅がでかいというか\n- Martin Fowlerの\"When to make a type\"\n    - 疑問に思ったらクラスを作れ\n- ライブコーディング！\n    - githubやyoutubeにサンプルあるから探してくれ\n    - dddするときのモデルに特定のフレームワークを使っても(よい|ダメ)派がある\n        - 使ってもいい派\n        - 今回はjpaのエンティティをモデルとして扱う\n    - ex. 「primitiveなフィールド、マイナスにしたくない」\n        - オブジェクトにしちゃう\n            - イミュータブルにする\n                - コンストラクタはprivateにして、static factoryを作る\n                    - その中で引数の検査をする\n                - getterで参照を返すときはコピーを返そう\n            - hashcode/eqaulsの実装忘れずに\n            - toStringはデバッグ情報を出すようにすべき\n            - Formattable知ってる？\n                - ビジネス要件での出力\n                - 国際化するときも使える、詳しくはjavadoc\n    - ComparisonChain使ってたけどよく知らない、何がうれしいか調べておく\n    - enumコンストラクタはjava8での書き方があるらしい\n        - 今回は時間の都合でjava7のやり方（おなじみやつ）\n        - コードサンプル調べておく\n    - JPAでのtips\n        - イミュータブルなエンティティにするには\n            - コンストラクタはprotected\n        - フィールドにオブジェクトを持つ場合\n            - それがバリューオブジェクトだったら@ElementCollection\n            - エンティティだったらいつもの@OneToManyなど\n            - 件数が数件程度ならバリューオブジェクト、100件とかになったらエンティティにしたほうがよい\n\n## Get ready for a cloud native...\n- k8s + istio でコンテナのメトリクスを簡単に取得できる話\n- k8sで環境ごとのurlを用意しなくてよくなる\n    - アプリ側で使うのは論理的なURL\n- サイドカーコンテナ\n    - mainコンテナとproxyコンテナのセット\n- istio使うとgrafanaでモニタリングのダッシュボードが表示される\n- eclipse micro profile\n- server.xml\n- リクエストに関する設定(ルール)\n    - コネクションタイムアウト\n    - レスポンスのディレイ設定\n        - テストしやすくてよい！\n- リクエストヘッダにtrace-idみたいなのがついている\n    - これを追うとどのコンテナを通っていったか追跡できる\n- サーキットブレーカーという単語が出てきたけど、それが何だっていうところ聞き逃した…\n    - 言葉の意味は「一時的に止める措置」？\n\n```\nservice meshes: key takeaways\n- transparently add technical cross-cutting concerns.\n- think \"AOP for applications\"\n- routing, load-balancing, resiliency, telemetry, auth\n- integrates well with Java enterprise approach:\n    - business logic is responsibility of the applications\n    - technical concerns are part of the envioronment\n```\n\n### 全体的に\n- Cloudというかコンテナ周りというかにフォーカスされているのを確認した。\n- 面白かったのは新しい機能だったり普段の暮らしに近いコーディング周りだったり。\n    - DDDは座学な印象あるけど実地で見せてもらうと楽しい。\n","childMarkdownRemark":{"excerpt":"メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracle…"}},"publishDate":"2018/05/17"}},{"node":{"title":"自己紹介ブログ","slug":"about-me","body":{"body":"職務経歴書に自己PRがないと指摘され、自分のよわみはすぐ書けるがつよみは書きにくい…と悩んだ末、自己紹介を書くことで代わりになるのでは、さらにブログの記事だったらより書きやすいはず、と思いました。\n\n1. プログラマーになろうと思ったきっかけ\n1. 好ましいと思っていること、大事にしたいこと\n\nこの辺が書ければ自己PRとしてもよいのでは。\n\n### プログラマーになろうと思ったきっかけ\n当時の僕は特に目指すものもなく派遣スタッフとして働いており、エクセルで住所データを加工する仕事をしていました。ショートカットキーを覚えてしまえばすぐ終わる仕事であったので、持て余した時間でVBAを覚えました。ここで初めてプログラミングの基礎を習得したのですが、新しいことを覚える楽しさ以外にも、高速化テクニックを試したり、他の言語ではどういう書き方をするのか調べたり（VBAは明らかに機能が少なく不自由だった）、学んだことがすぐ活かせるというのも面白く、なにより自分の書いたものが動くことは楽しい、原始的な喜びがあると気づきました。\n\nその職場では一応意味のあるものを作ることができて、それはエクセルブックから外字を検出するといったものでした（最終的に印字することが目的なので、事前に検出できることには意味がありました）。そのとき参考にしたのが「詳解正規表現」で（俗にいうところのフクロウ本）、初心者が読むにはちょっと難しかったんですが、体系的に知識を得るには（ちょっと背伸びしてでも）技術書というものを読むのが早いということを知りました。そんな感じで、こんな楽しいことが仕事になるんだったらいいなと次第に考えるようになりました。\n\nその頃、以下の記事を読んだのもその気になった原因のひとつと思います。\n\n- [プログラマになりたいあなたへの手紙 - プログラマになりたいあなたへ：ITpro](http://itpro.nikkeibp.co.jp/article/COLUMN/20090324/327115/?rt=nocnt)\n- [知らないと損する職業訓練 - phaの日記](http://pha.hateblo.jp/entry/20080429/1209464163)\n\nその後、職業訓練を経て、未経験OKな派遣業を営むSIerに拾ってもらうことができました。\n\n### 好ましいと思っていること、大事にしていること\nプログラマーとして働いていて気にしていることです。当たり前といえば当たり前のことではある。\n\n- テキストを好んで使うこと\n    - ドキュメントもインフラも何でもテキストで表現したらdiffも取れるしgitで管理できていいね、くらいの意味\n        - wordやエクセルで管理するのはウッと思う\n        - 人によってはマークダウンの書式が構造化された文書に見えないかもしれない（プレビューが必須だと面倒臭さが先に立ってしまう）\n- チーム全体で合意を取ること\n    - プロダクトは自分たちで作っていくという意識を持てる\n- ツールやWebサービスを取り入れること\n    - どんどん便利になっていきたい\n- 自動化\n    - どんどん便利になっていきたい\n    - 時間を生むので圧倒的に正しい\n        - 運用系のツールもどんどん取り入れたいのだけど、チームの合意がないまま使い始めるとつらいはずなので、おすすめしていく運動とセットだよなと思っている\n- 便利になること\n    - プログラマとしての使命だと思う\n- 名前付け\n    - Matzの「名前重要」の教えを念頭に\n    - クラス設計の第一歩と思っている\n        - この辺がgolang難しい（クラスがない、ファイル分割をどの単位でやっていいのかなど）\n- 目的を見失わないこと\n    - 議論が停滞したりちょっと逸れてきたなというとき「どうすれば勝ちなんだっけ」と言うことにしてる\n\n### 以上です\n的外れな感じになっていませんように…。\n","childMarkdownRemark":{"excerpt":"職務経歴書に自己PR…"}},"publishDate":"2018/01/29"}},{"node":{"title":"Jekyllのpostをvim scriptで作る","slug":"vim-script-jekyll","body":{"body":"### 問題\nJekyllでpost用のファイルを作るのがめんどくさい。\n- ファイル名が `yyyy-mm-dd-{title}.md`\n    - 数字やハイフンなんて打ちにくいところにあるのに…\n- お決まりのテンプレートを書かなくちゃいけない\n    - dateが特にめんどい\n    - こんなの\n```\n---\nlayout: post\ntitle: \"記事のタイトル\"\ndate: 2018-01-01 00:00:00 +0900\ncategories: vim\n---\n```\n\n### 解決方法\nvim pluginを探すと3つほどぱっと見つかるんだけど、欲しいものは簡単なものだし、自分でvim scriptを書いてみようと思った。\n\n### 欲しいもの\n- コマンドを実行するとバッファが開かれ、そこにテンプレートが展開される\n- コマンドは複数の引数を受け取ってハイフンでつなぎ、それが `yyyy-mm-dd-{title}.md` の `title` になる\n- 吐き出す場所はひとまずカレントディレクトリでいいや\n\n### 参考にしたもの\n- [Vimスクリプト基礎文法最速マスター - 永遠に未完成](http://thinca.hatenablog.com/entry/20100201/1265009821)\n    - 数年前にもvim script書こうと思い立ったことがあって、ヘルプよりこっちを見てしまう\n- [vim-jp » Vim script事始め](http://vim-jp.org/tips/start_vimscript.html)\n    - `:h write-plugin` が丁寧でvimはドキュメントしっかりしてるな～と思った\n    - `q-args` というのを初めて知った。 `args` だとコマンドの引数を文字列として扱ってくれないので不便だなあと悩んでいた。\n    - プラグインの2重ロードを防ぐイディオム、開発のとき邪魔だからコメントアウトしてたんだけど、うっかりコミットしそう\n        - 何回でもロードしていいように書くのが正解なのかな\n- [Vimスクリプトを書いてみよう — KaoriYa](https://www.kaoriya.net/blog/2012/02/19/)\n    - わかりやすい\n- 自分のvimrc\n    - 普段のメモを取るように、日付をファイル名にしたバッファを開くコマンドを作っていたのだった\n    - それもどこからかコピーして持ってきたやつだったはず…\n\n### できたもの\n長いので折りたたみたい…\n\n`gist:fourside/d09cbf3a755e292e977e31e592a7ee09`\n\n### はまったところ\n- 可変長引数をjoinすると、デリミタが無視されてスペースで連結されてしまう\n    - 仕方なく、joinしてsplitしてjoinした…\n- strftime('%z')から `+0900` みたいなタイムゾーンのオフセットを得たいのだけど、Windowsだと `東京（標準時）` が返ってきてしまう。\n    - [strftime(\"%z\") not working correctly · Issue #860 · vim/vim](https://github.com/vim/vim/issues/860)\n    - 仕方ないっぽいので、Windowsでは `+0900` 固定にした。自分用だし。\n","childMarkdownRemark":{"excerpt":"問題 Jekyllでpost用のファイルを作るのがめんどくさい。 ファイル名が  数字やハイフンなんて打ちにくいところにあるのに… お決まりのテンプレートを書かなくちゃいけない dateが特にめんどい こんなの 解決方法 vim pluginを探すと…"}},"publishDate":"2017/12/31"}},{"node":{"title":"blog 環境","slug":"github_pages_jekyll","body":{"body":"今までメモはローカルに溜めていて、マシンの買い替えなんかが起きるとめんどくさくて、そのせいでDropboxが必須になってしまっていたり、自宅でやったことを職場で確認したいだとかは基本的に困難なので、ブログとして公開することにした。\n\n### 構成要素と理由\n\n- [GitHub Pages][GitHub Pages]\n- [jekyll][jekyll]\n- on WSL\n\nはてなやMediumでもよいんだろうけどソーシャルな機能はいらないし、tech系の話だったらgithubアカウント上でやったほうがいいかな程度の理由。テキストが手元に残るのもよい。\n\nあと最近、自宅のマシンをWindows10にしたこともあって、WSLだったらWindows上でrubyの開発環境を整えることに苦労しなくなると思った。cmd.exeからbashと打つだけでlinuxの世界になるのはすごい楽。ただrubyのビルドにえらい時間がかかったので途中で諦め、パッケージマネージャからインストールすることにした。バージョンはちょい古めだけど、nokogiriがすんなり入るのはうれしい。\n\n### 手順\n```\n$ sudo apt-get install ruby ruby-dev zlib1g-dev\n$ ruby -v\nruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]\n$ gem install jekyll jekyll-feed minima\n$ jekyll -v\njekyll 3.6.2\n$ jekyll new fourside.github.io\n```\n\nzlibの1gってなんだろうね。\n\n### はまりどころ(未解決)\nWSL(Ubuntu)でrootだと日本語が表示できない。標準ユーザだとできる。envコマンドの差分を見たけど影響しそうなところがないように見える。どこに差があるのか分からない。ターミナルに弱い。\n\n### めんどくさいところ\npostするときにいっぱつでテンプレートを開きたい。ファイル名`yyyy-mm-dd-{title}.md`なんて手で打ちたくないし、ファイルの中身に作成日時まで入れなくちゃいけない。jekyllのコマンドにあってよさそうだけど、ぱっと見ない。\n\nvim pluginを探すか、これくらいなら自分で作ってみようかなという気持ちになっている。\n\n[GitHub Pages]: https://pages.github.com/\n[jekyll]: https://jekyllrb-ja.github.io/\n","childMarkdownRemark":{"excerpt":"今までメモはローカルに溜めていて、マシンの買い替えなんかが起きるとめんどくさくて、そのせいでDropboxが必須になってしまっていたり、自宅でやったことを職場で確認したいだとかは基本的に困難なので、ブログとして公開することにした。 構成要素と理由 GitHub Pages…"}},"publishDate":"2017/12/31"}},{"node":{"title":"radiko 録音環境","slug":"radiko_infra","body":{"body":"さくらVPSを借りてradikoの録音環境を用意していたんだけど、今年の4月くらいから録音ができなくなっていた。今更だけど確認してみると、`curl https://radiko.jp/area` がOSAKAになってたので、東京の放送局が聴取できない状態だった。radikoの仕様変更じゃなかったので一安心。\n\nまずawsの東京リージョンでt2.microインスタンスを作った。OSはamazon linux。radikoのエリア判定はTOKYOだったのでこれでよし。鍵はawsが生成したもの、インバウンドはsshとhttpのみ、さらにマイIPアドレスから許可するように、screenとvimのrcファイルを用意した。\n\nあとは必要なものをビルドするだけ。\n\n### 必要なもの\n\n- [rtmpdump][rtmpdump]\n- [swftools][swftools]\n- [ffmpeg][ffmpeg]\n\n### 前準備\n```bash\nyum install git\nyum groupinstall \"Development Tools\"\n```\n\n### rtmpdump\nオフィシャルの通り、`git clone git://git.ffmpeg.org/rtmpdump` する。READMEを見るとconfigureしなくてよいみたい。`make SYS=posix && make install`した。\n\n```\n# rtmpdump -v\nrtmpdump: error while loading shared libraries: librtmp.so.1: cannot open shared object file: No such file or directory\n```\n\nsoが読めてないっぽい。ビルドしたsoは`/usr/local/lib`にインストールされてる。\n\n```\n# cat /etc/ld.so.conf\ninclude ld.so.conf.d/.conf\n# echo /usr/local/lib > /etc/ld.so.conf.d/rtmpdump.conf\n# ldconfig\n```\ncf. https://blogs.yahoo.co.jp/mrsd_tangerine/40359620.html\n\n### swftools\n最新のtarballを落としてくる。configure, make, make installですんなりいけた。(さくらVPSで使ってたdebianでは苦労した印象あったけど曖昧）\n\n### ffmpeg\nすっかり忘れてたんだけど旧環境ではlameを使ってて、それをconfigure時に指定してやる必要がある。（指定しなくてもビルドはできるけど、ここでやりたいのはflvからmp3にエンコードすることなので）\n\n[lame][lame]から落としてくる。configure, make, make installですんなりビルドできる。soは/usr/local/libに吐かれる。\nこのあとffmpegのビルド。\n```\n# configure --enable-libmp3lame --disable-x86asm\n# make\n# make install\n```\n\n### 以上\nこんな感じでした。\n\n[rtmpdump]: https://rtmpdump.mplayerhq.hu/\n[swftools]: http://www.swftools.org/download.html\n[ffmpeg]: https://www.ffmpeg.org/download.html\n[lame]: http://lame.sourceforge.net/download.php\n","childMarkdownRemark":{"excerpt":"さくらVPSを借りてradikoの録音環境を用意していたんだけど、今年の4月くらいから録音ができなくなっていた。今更だけど確認してみると、 がOSAKAになってたので、東京の放送局が聴取できない状態だった。radikoの仕様変更じゃなかったので一安心。 まずaws…"}},"publishDate":"2017/12/30"}}]}},"pageContext":{}},"staticQueryHashes":["2390137347","3000541721"]}