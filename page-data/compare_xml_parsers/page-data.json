{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/compare_xml_parsers",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"XML Parserの比較","publishDate":"2020/10/21 09:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"radikoのxmlをjsonにパースしたくて、npmモジュールの比較をしてみました 前提 ランタイムは Node.js で、ブラウザでの実行は考慮しない パースの実行頻度はそれほど高くないので、実行速度は気にしない コンテナに乗せる可能性はある（ファイルサイズやインストールの速度は気にする） 対象はこの…","html":"<ul>\n<li>radikoのxmlをjsonにパースしたくて、npmモジュールの比較をしてみました</li>\n<li>前提\n<ul>\n<li>ランタイムは Node.js で、ブラウザでの実行は考慮しない</li>\n<li>パースの実行頻度はそれほど高くないので、実行速度は気にしない</li>\n<li>コンテナに乗せる可能性はある（ファイルサイズやインストールの速度は気にする）</li>\n</ul>\n</li>\n<li>対象はこの3つにした\n<ul>\n<li><a href=\"https://www.npmjs.com/package/xml2js\">xml2js - npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/xml2json\">xml2json - npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/fast-xml-parser\">fast-xml-parser - npm</a></li>\n</ul>\n</li>\n<li>比較したときのコードはこれ\n<ul>\n<li><a href=\"https://github.com/fourside/choice_xml_parsers\">fourside/choice_xml_parsers</a></li>\n</ul>\n</li>\n</ul>\n<h3>TL;DR</h3>\n<ul>\n<li>悩むけど fast-xml-parser がよさそう\n<ul>\n<li>次点で xml2js</li>\n</ul>\n</li>\n</ul>\n<h3>比較の軸</h3>\n<ul>\n<li>npm trends</li>\n<li>型情報の有無</li>\n<li>使用感</li>\n<li>出力の比較</li>\n</ul>\n<h3>npm trends</h3>\n<p><a href=\"https://www.npmtrends.com/xml2json-vs-fast-xml-parser-vs-xml2js\">xml2json vs fast xml parser vs xml2js | npm trends</a></p>\n<ul>\n<li>xml2jsがGitHub starもダウンロード数も圧倒的に多い</li>\n<li>ファイルサイズも xml2js が小さい</li>\n</ul>\n<h3>型情報の有無</h3>\n<ul>\n<li>fast-xml-parserは自身の型定義を提供してくれている</li>\n<li>それ以外の2つは@types パッケージがある</li>\n</ul>\n<h3>使用感</h3>\n<ul>\n<li>xml2js\n<ul>\n<li>プロミス用のメソッドがあり、若干野暮ったい(<code class=\"language-text\">parseStringPromise</code>)</li>\n</ul>\n</li>\n<li>xml2json\n<ul>\n<li>インストール時にローカルビルドが走る</li>\n<li>パースの結果がJSONの文字列で、<code class=\"language-text\">JSON.parse</code> する必要がある</li>\n</ul>\n</li>\n<li>fast-xml-parse\n<ul>\n<li>特になし</li>\n</ul>\n</li>\n</ul>\n<h3>出力の比較</h3>\n<ul>\n<li>入力は以下のようなラジオ局一覧の xml</li>\n<li>結論、出力に関しては、オプション次第でどれも使いやすいJSONが得られる</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stations</span> <span class=\"token attr-name\">area_id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JP13<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">area_name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TOKYO JAPAN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>station</span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>station</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>station</span><span class=\"token punctuation\">></span></span>...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>station</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stations</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>xml2js</h4>\n<ul>\n<li>属性はフラットに表現されるのではなく、オブジェクトとしてまとめて表現される\n<ul>\n<li>フィールド名はオプションで変更可能</li>\n</ul>\n</li>\n<li>テキストノードはデフォルトで配列で表現されるが、オプションで変更可能</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"stations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"attr\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"area_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JP13\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"area_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TOKYO JAPAN\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"station\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>...<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>xml2json</h4>\n<ul>\n<li>特にオプションの指定なく、分かりやすいJSONが得られた\n<ul>\n<li>ただしオプションは他の2つに比べて粗い</li>\n</ul>\n</li>\n<li>属性はフラットに親フィールドにぶら下がる（ので、xmlの属性であったかどうかは不可逆）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"stations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"area_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JP13\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"area_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TOKYO JAPAN\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"station\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>...<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>fast-xml-parser</h4>\n<ul>\n<li>デフォルトで属性を無視ってきたので驚いたが、オプションで制御可能</li>\n<li>属性はフラットに親フィールドにぶら下がる\n<ul>\n<li>ただしフィールド名にサフィックスをつけることができる（オプションで空文字を指定することもできる）</li>\n</ul>\n</li>\n<li>下記の出力例には現れてないが、数値のノードはJSONでも数値として表現される（上記2つは <code class=\"language-text\">\"1\"</code> のように文字列になる)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"stations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"area_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JP13\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"area_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TOKYO JAPAN\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"station\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>...<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>おわりに</h3>\n<p>他に良さそうなのがあれば教えてください</p>"}}}},"pageContext":{"slug":"compare_xml_parsers","previous":{"body":{"body":"- [fourside/sqlgen-cli](https://github.com/fourside/sqlgen-cli)\n\n### なにをするやつ\n- JSON から INSERT 文や DELETE 文を出力します\n\n### なぜ作ったのか\n- 元ネタは過去にやった案件で、簡単に書いたテストのヘルパーの焼き直し\n    - テスト用のデータの作成\n    - たまたま MySQL だったので、bulk insert の形にしている\n    - cliの形式を取ってはいるけど、完全に自分用であまり柔軟には作っていない\n- 難しいことは一切していない\n    - 外部参照制約での値の決定とか…\n    - DELETE 文も参照関係を考慮していないので、INSERT 文を生成してる順番を逆にしてるだけ\n- TypeScriptファイルにJSON定義しているので、デフォルト値や日時の生成など動的に値を決定できるのが便利ポイント\n- わざわざ書き直したのは、触ったことのないライブラリを使ってみたいというモチベーションもある\n    - いずれもちょろっとしか触れてないので、そんなに何か言えることはない…\n\n#### [dayjs](https://github.com/iamkun/dayjs)\n- 軽量、Dateのprototypeも汚染しない、npm trendsみても結構流行ってる\n- utcが素のままで使えなかったのは少し驚いたけども、デフォルトで入ってるプラグインを通せば大丈夫\n- 型定義も元から入ってるの安心感ある\n\n#### [yargs](https://github.com/yargs/yargs)\n- cli parserのcommanderは以前使ったことがあったので、別のやつ\n- 悪くない、次どっち使うかは迷う\n\n#### [ava](https://github.com/avajs/ava)\n- 年末のsurveyとかで見かけるテストライブラリ\n- jestだとリッチすぎるかなーというときmochaを選ぶけど、これでもよさそうな感じはする\n- TypeScriptで使うとき [多少の設定](https://github.com/avajs/ava/blob/master/docs/recipes/typescript.md) が必要だった\n\n以上です。\n"},"title":"JSON から SQL を生成しました","slug":"json_to_sql","updatedAt":"2020-09-28T13:57:12.955Z"},"next":{"body":{"body":"- [クラウド破産を回避するInfrastructure as Code実践ガイド - KOS-MOS - BOOTH](https://booth.pm/ja/items/2366365)\n    - 技術書典9で見つけました\n    - AWSアカウントをセキュアに使うために、それ用のAWSリソースをTerraformで作成しようという内容\n\n### 動機\n- 全くノーガードだったものの、ちゃんとしたい気持ちは常にあった\n    - [AWSアカウントを作ったら最初にやるべきこと ～令和元年版～ | Developers.IO](https://dev.classmethod.jp/articles/aws-1st-step-new-era-reiwa/)\n        - こういうのもブックマークして積んだままになってた\n        - 開発に *直接* 関係しない部分だし…\n    - とはいえ、毎月AWSにお金を払っているのだし、最低限のことはやっておきたい\n\n### やったこと\n- Terraformで作成されているのを、AWS CDKで再実装\n    - CDKの勉強にもなるし\n    - 主に10章から18章、22章を対象にした\n    - 作ったリソースは以下の通り\n        - CloudTrail / AWS Config / GuardDuty / IAM Access Analyzer / Security Hub / Chatbot\n        - これらに S3 / IAM / SNS らへんを連携させる\n        - 22章では、月額の利用料金をSlack通知する Lambda Function を作成\n- 作成したものはこちら\n  - [fourside/cloud-bankruptcy](https://github.com/fourside/cloud-bankruptcy)\n\n### やってみて\n- IAMロールらへんの理解が曖昧だったのが、 *少し* 理解が進んだ\n- AWS Config の料金が意外とかかる\n    - ビジネスで使うなら微々たるものかもだけど、対象ルールが200弱で 1.9 USD/月 くらいになった\n    - 逆にいうと、ほかはほとんどかからないのでやっておくのが得\n- よくわからないタイミングでGuardDutyから通知がきて怖い…\n    - Severity: LOW なので放置してしまっているが…\n    - とはいえ、ちょっとしたことでも通知が来ることによる安心感のほうが大きい\n- 利用料金のSlack通知が便利\n    - 「普段ならこれくらいなのに、今月の予測値が高い」みたいな状況に気付ける\n        - 後始末してなかったEC2リソース(インスタンスやElasticIP)があることに気づけた\n"},"title":"「クラウド破産を回避するIaC実践ガイド」を読んでCDKで再実装しました","slug":"cloud_bankruptcy_iac","updatedAt":"2020-11-05T04:01:00.400Z"}}},
    "staticQueryHashes": ["1784162573","882115108"]}