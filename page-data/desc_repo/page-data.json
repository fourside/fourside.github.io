{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/desc_repo",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"作ったものの説明","publishDate":"2019/08/13 14:19:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。 就職活動でGitHubのURLを乗せても、READMEに書くのは簡単な説明と使い方くらいなので分かりにくいと思うので…。 主に「なぜ作るのか」、「何を学んだか」 基本的には、自分の問題を解決するため 次に、興味のあるライブラリなどを試すため ie…","html":"<ul>\n<li>今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。</li>\n<li>就職活動でGitHubのURLを乗せても、READMEに書くのは簡単な説明と使い方くらいなので分かりにくいと思うので…。\n<ul>\n<li>主に「なぜ作るのか」、「何を学んだか」</li>\n<li>基本的には、自分の問題を解決するため\n<ul>\n<li>次に、興味のあるライブラリなどを試すため</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/ie-ignore-slide\">ie-ignore-slide</a></h2>\n<ul>\n<li>スライドのライブラリ</li>\n<li>polyfill使えばいいのだけど完全に個人用なのでIEを無視することに</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>パワーポイントを使いたくなさすぎて自作した</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>WebComponents\n<ul>\n<li>当時ようやくFirefoxで使えるようになったのと、技術書典でWebComponentsの本を買ったことが理由</li>\n</ul>\n</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>地味にプログレスバーを用意してLTに便利なようにしてる</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>CSSアニメーションをもっとスライドらしくしたい</li>\n<li>コンポーネントにあてるCSSをきれいに書けずもどかしい</li>\n<li>npm publishしたほうが使いやすい</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/podcast\">podcast</a></h2>\n<ul>\n<li>録音したものをpodcast形式で配信するアプリケーション</li>\n<li>だいぶ前に作っていて今でもずっと使い続けており、最近コンテナ化した</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>ラジオが好きなので個人用のアーカイブ</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>docker\n<ul>\n<li>もともと素朴に作っていたものをコンテナ化した</li>\n<li>そうすることでミドルウェアの設定などもgitで管理できるようになり、ポータビリティが得られた</li>\n<li>logging driverでログ収集することでfluentdクライアント不要になるところがよい</li>\n</ul>\n</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>docker-compose.ymlを開発用と本番用に分けたところ\n<ul>\n<li>本番用にはfluentd/mongodbを足して、ログの集積をしている</li>\n</ul>\n</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>集積したログを閲覧・検索したり、監視したりする仕組みを用意したい</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/videoserver\">videoserver</a></h2>\n<ul>\n<li>youtubeから動画をダウンロードしてpodcastとして配信する</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>テック系の動画を通勤中に見れるように</li>\n<li>podcastとして管理すると未読管理が楽になる</li>\n<li>結局はmusic videoがメインになってしまった</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>バックエンドはgolang\n<ul>\n<li>goroutine, channelの基本的な使い方</li>\n<li>パッケージ管理はいろいろ変遷があったようだがdepを使うようにした</li>\n<li>ビルドにはmakeを使い、静的解析をするようにした</li>\n</ul>\n</li>\n<li>フロントエンドはreact\n<ul>\n<li>途中でhooksに書き換えてみたり、reduxに入門したりした</li>\n<li>ビルドツールはparcelにした\n<ul>\n<li>勝手に必要なものが裏で揃えられるので楽だけど、たまにうまく行かなくなるときがある…</li>\n<li>小さく始めるときの最初のビルドツールとして最適だと思った</li>\n</ul>\n</li>\n<li>web workerも使ってみた</li>\n</ul>\n</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>polling処理でダウンロードの進捗表示をするところ\n<ul>\n<li>バックエンドはgoroutineからyoutube-dlの標準出力を抜き取ってレスポンスを返す</li>\n<li>フロントエンドはWebWorkerでサーバリクエストを送り、メインスレッドにサーバレスポンスの一部を返す</li>\n</ul>\n</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>削除APIができていない\n<ul>\n<li>DBを使ってない（ファイルシステムを直接見てレスポンスを作っている）ので、一意にしにくい</li>\n</ul>\n</li>\n<li>reduxを使い始めたが、きちんと理解した感じがしない\n<ul>\n<li>ミドルウェアまで入れたくない気持ちがあるが実際はどうなのか</li>\n</ul>\n</li>\n<li>字幕情報をダウンロードできるのだが、動画に埋め込むとき字幕表示がきれいではない</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/meigaza\">meigaza</a></h2>\n<ul>\n<li>スクレイピング結果をslackやスマホに通知してくれるスクリプト</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>映画をよく見るようになった\n<ul>\n<li>東京にある名画座のスケジュールを簡単に知りたくなった</li>\n<li>気づいたら前売り券を買える期間が過ぎていた</li>\n</ul>\n</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>puppeteerによるスクレイピング</li>\n<li>aws lambdaのカスタムランタイム</li>\n<li>iftttでの通知</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>最初は常駐型のボットを実装しようと思ったが、スケジュールでキックされるAWS Lambdaで実現できたこと</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>cliでデプロイできるようにしたい</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/mock-server\">mock-server</a></h2>\n<ul>\n<li>リクエストパスとサーバローカルのファイルをマッピングするサーバ</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>フロントエンド(SPA)の開発でモックサーバが欲しくなった\n<ul>\n<li>特にページャの実装で、特定のクエリ文字列を含むURLのとき、それっぽいJSONを返してほしい</li>\n<li>nginxのlocationはクエリまで含めて判定してくれない</li>\n<li>軽く探しても欲しい物はなさそうだったので、自分で書くことにした</li>\n</ul>\n</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>node.jsでのサーバの書き方</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>ライブラリを使わないようにnodeのapiだけで作ってみた\n<ul>\n<li>使うときnpm installする必要がなくなって、シンプルなものになった</li>\n</ul>\n</li>\n<li>普通に作ると起動時だけ設定ファイルを読むように作るが、フロントエンドの開発をしやすいようにリクエストの度に設定ファイルを読むようにした</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>typescript化</li>\n<li>テストがない\n<ul>\n<li>ルーティング定義のファイルを実行時引数で渡せるようにしないとな…</li>\n</ul>\n</li>\n<li>公開ディレクトリに置かれたファイル（webpackなどのビルド成果物）の変更検知して、ブラウザをリロードしたい</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/modal_sample\">modal_sample</a></h2>\n<ul>\n<li>よくあるモーダル画面のサンプル実装</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>仕事でモーダル画面が必要になったがライブラリを使わず実装したかった</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>よくあるモーダルの実装方法\n<ul>\n<li>世の中のモーダルはどう実装されているのか、いろいろ調べてみるとだいたい同じだったのでそのように実装した</li>\n</ul>\n</li>\n<li>cssアニメーションの基礎</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>ライブラリを使わずvanillaに作ること</li>\n<li>WindowsのインターネットオプションによってIEではlocalStorageが無効にできるので、Nullオブジェクトを用意した</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>特になし</li>\n</ul>\n<h2><a href=\"https://github.com/fourside/elecron\">elecron</a></h2>\n<ul>\n<li>指定したスケジュールで任意のURLを開く常駐アプリ</li>\n</ul>\n<h4>背景</h4>\n<ul>\n<li>物理的な勤怠打刻からWebの打刻に移行した際、打刻を忘れてしまうという話を聞いた\n<ul>\n<li>出退勤の時間になったらブラウザで打刻用のサイトを開くアプリを作ろうと思った</li>\n</ul>\n</li>\n</ul>\n<h4>学んだ技術</h4>\n<ul>\n<li>electron</li>\n<li>vue</li>\n<li>webpack</li>\n</ul>\n<h4>工夫</h4>\n<ul>\n<li>windows向けに作ったのでappveyorを使ってみた</li>\n</ul>\n<h4>改善点</h4>\n<ul>\n<li>cronの書式が分かりにくい（がパターンの表現力は高いので、完全に置き換えるものは思いつかず…）</li>\n<li>コンポーネントが大きいので分割したい\n<ul>\n<li>1個のFormを分割するのは冗長な部分が増えそうで躊躇してしまう</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"desc_repo","previous":{"body":{"body":"メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracleアカウント、個人のやつだしね…。\n\nメモと感想です(後でスライドが公開されるだろうけど)。\n\n## key note\n- リリースモデルについて、わかりやすいけどOpenJDKはLTS出ないのね\n- jdk11が今年9月に出る(予定通り)\n    - JEPsはこれからも追加される\n- mission controll と flight recorder\n    - Eclipse pluginで開けて便利\n        - 下部のペインにスタックトレースからコードにジャンプできる\n    - パフォーマンスの問題3例での見え方\n        - LinkedListのループ内のget\n        - シングルトンインスタンス(ロガーとか)\n            - これどういうシチュエーションの問題だっけ\n        - ループ内でオートボクシングが発生しててGC走りまくってる\n            - 赤いアイコン出ないので問題なさそうに見えるので注意\n                - どう気づけばいいんだ？\n- リリース未定だったりする新しい機能\n    - Valhalla\n    - Portola\n    - Panama\n    - Amber\n    - Loom\n    - ZGC\n- fn\n    - サーバレス\n    - cli\n        - ボイラープレートを吐いたり\n        - ローカルサーバ起動できたり\n            - 個人的にこれがすごく良いと思う\n        - アプリをデプロイできたり\n    - javaで単一の処理で書けてしまうが、裏では複数のコンテナが実行されてるやつのデモ\n        - flickrから車の写真を集めてきて最終的にslackにポストしまくる\n\n## Java in a Wolrd of Containers\n- 翻訳レシーバの付け方がわからなくて英語で聞いてみたけどやっぱり翻訳必要だな…\n- jlink, jdeps\n- musl libc\n- portola\n- AppCDSでコンテナ間のクラスデータのシェア\n- Dockerの設定を考慮するJava起動オプションのサポート\n- 適切なbase imageを使うとサイズの軽量化できる\n\n## Project Valhalla\n- Value Types\n- Generics Specialization\n- Var Handles\n\n- 名前の由来\n    - Value Typesと似てるっしょ\n- シンタックス\n    - 例えばこんなの\n    - ```value class Hoge { } ```\n- クラスのように書けてプリミティブのように振る舞う\n    - ヘッダがない\n        - オブジェクトのメタ情報\n            - 何のインスタンスなのかとか\n    - モニタがない\n        - ロックの情報\n    - キャッシュミスしない\n        - これはどういう理屈だっけ…\n    - \"What Would Int Do\"\n- ジェネリクス\n    - どう扱えるの？\n    - `List<int> list = ...`\n- IntStreamとかToIntFunctionとかなくせる\n- クラスの継承ツリー\n    ```\n    -- any(仮)\n     |- primitive(int/long/...)\n     |- Object\n          | - ...\n    ```\n    - このany(仮)をバイトコードでどう表現するのとか悩んでるらしい\n- VarHandles\n    - Unsafeで扱えたメモリ操作ができる\n- 余談\n    - メモリバリア\n    - volatile\n        - この辺理解できてない\n\n## Curing you Domain Model Anemia...\n- DDDに触れてからのコードスメル\n    - フォーカスする話題の粒度が真逆というか振り幅がでかいというか\n- Martin Fowlerの\"When to make a type\"\n    - 疑問に思ったらクラスを作れ\n- ライブコーディング！\n    - githubやyoutubeにサンプルあるから探してくれ\n    - dddするときのモデルに特定のフレームワークを使っても(よい|ダメ)派がある\n        - 使ってもいい派\n        - 今回はjpaのエンティティをモデルとして扱う\n    - ex. 「primitiveなフィールド、マイナスにしたくない」\n        - オブジェクトにしちゃう\n            - イミュータブルにする\n                - コンストラクタはprivateにして、static factoryを作る\n                    - その中で引数の検査をする\n                - getterで参照を返すときはコピーを返そう\n            - hashcode/eqaulsの実装忘れずに\n            - toStringはデバッグ情報を出すようにすべき\n            - Formattable知ってる？\n                - ビジネス要件での出力\n                - 国際化するときも使える、詳しくはjavadoc\n    - ComparisonChain使ってたけどよく知らない、何がうれしいか調べておく\n    - enumコンストラクタはjava8での書き方があるらしい\n        - 今回は時間の都合でjava7のやり方（おなじみやつ）\n        - コードサンプル調べておく\n    - JPAでのtips\n        - イミュータブルなエンティティにするには\n            - コンストラクタはprotected\n        - フィールドにオブジェクトを持つ場合\n            - それがバリューオブジェクトだったら@ElementCollection\n            - エンティティだったらいつもの@OneToManyなど\n            - 件数が数件程度ならバリューオブジェクト、100件とかになったらエンティティにしたほうがよい\n\n## Get ready for a cloud native...\n- k8s + istio でコンテナのメトリクスを簡単に取得できる話\n- k8sで環境ごとのurlを用意しなくてよくなる\n    - アプリ側で使うのは論理的なURL\n- サイドカーコンテナ\n    - mainコンテナとproxyコンテナのセット\n- istio使うとgrafanaでモニタリングのダッシュボードが表示される\n- eclipse micro profile\n- server.xml\n- リクエストに関する設定(ルール)\n    - コネクションタイムアウト\n    - レスポンスのディレイ設定\n        - テストしやすくてよい！\n- リクエストヘッダにtrace-idみたいなのがついている\n    - これを追うとどのコンテナを通っていったか追跡できる\n- サーキットブレーカーという単語が出てきたけど、それが何だっていうところ聞き逃した…\n    - 言葉の意味は「一時的に止める措置」？\n\n```\nservice meshes: key takeaways\n- transparently add technical cross-cutting concerns.\n- think \"AOP for applications\"\n- routing, load-balancing, resiliency, telemetry, auth\n- integrates well with Java enterprise approach:\n    - business logic is responsibility of the applications\n    - technical concerns are part of the envioronment\n```\n\n### 全体的に\n- Cloudというかコンテナ周りというかにフォーカスされているのを確認した。\n- 面白かったのは新しい機能だったり普段の暮らしに近いコーディング周りだったり。\n    - DDDは座学な印象あるけど実地で見せてもらうと楽しい。\n"},"title":"Java Day Tokyo 2018","slug":"javadaytokyo2018","updatedAt":"2020-09-01T15:46:37.193Z"},"next":{"body":{"body":"\nfourside.github.io を jekyll で構築していたけど、gatsby に鞍替えした。モチベーションは gatsby を触ってみたかったというくらい。\n\n### やったこと\n\nなるべくシンプルにしたかったので、オフィシャルのスターターである [gatsbyjs/gatsby-starter-blog](https://github.com/gatsbyjs/gatsby-starter-blog) を使った。とはいえSEOとかオフライン対応とかもろもろ入っているので便利。\n\n自分でカスタマイズしたのはこれくらい。移行元となるべく機能差異ないようにした（そんな機能もりもりじゃないけども…）。基本的にプラグインを入れて設定をするだけ。\n\n- 自分のアイコンは Gravatar からひっぱってきた\n- Gist を展開するようにした\n- RSS feedを吐くようにした\n- 自動でデプロイされるようにした\n\n自動デプロイについて。Contentful で publish したら走るようにした。 jekyllだと mdファイルをpushしたらGitHub Pagesが自動でビルドしてくれるが、Gatsby + Headless CMS だと、ビルド時に CMS から記事を取得しなくてはならない。具体的には Contentful Webhook と GitHub Actions の組み合わせ。Contentful で記事を操作したら GitHub API にリクエストが飛ぶようにする([Webhooks | Contentful](https://www.contentful.com/developers/docs/concepts/webhooks/))。GitHub Action で、そのリクエストが飛んできたらビルドとデプロイが走るようにする。\n\n~~デプロイは、[gh-pages](https://www.npmjs.com/package/gh-pages) を使うだけ。GitHub Pagesのブランチを `gh-pages` にしておいて、ビルド成果物だけを push する。~~ GitHub Actions では [peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token) を使うようにした（直接 gh-pages を使うと `fatal: empty ident name (for <runner@fv-az60.xxxxxxxxxxxxxxxxxxxxxxxxxx.cx.internal.cloudapp.net>) not allowed` なんて怒られてしまう。これには workflow 内で自動生成される GITHUB_TOKEN が必要らしいのだけど、便利な action ([peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages))があるので使わせてもらった。）\n\nGitHub Actions のドキュメントは以下を参照した。日本語版だとデッドリンクがあったりURLのフラグメントが設定されてなかったりする。余談だけどドキュメントの規模が大きくなったとき、一部だけ見て理解できるようにコンテキストを少なくして作成できたらいいだろうなと思うものの、もともとボリュームが大きいのでできるだけスリムに書きたいとも思うし、塩梅は難しいな。\n\n- [Events that trigger workflows - GitHub Docs](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch)\n    - `repository_dispatch` イベントを発生させるとworkflowをキックできるみたい\n- [Repositories - GitHub Docs](https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event)\n    - 上記イベントを発生させる GitHub API\n- [Creating a personal access token - GitHub Docs](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)\n    - 外部サイトの Webhook に与える認証について\n    - 一年で revoke されるっぽいので、ブログ更新を一年サボると動かなくなる\n    - 今回は repo > public_repo でよい\n    - その乗せ方\n        - [Resources in the REST API - GitHub Docs](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#oauth2-token-sent-in-a-header)\n- [GitHub API v3 | GitHub Developer Guide](https://developer.github.com/v3/#user-agent-required)\n    - GitHub APIは、User-Agent ヘッダがないとエラーになるみたい。なんか適当なのを入れておく\n\n### misc\nそれぞれ触ってみての感想\n\n#### Headless CMS\nなんで Headless CMS にしたか。ローカルにファイル作ってもいいかとも思ったけど、知らないものは触っておくことにした。後付で理由も考えてみたけど…。\n\n- jekyllの場合\n    - ディレクトリやファイル名で記事のURLが決まる。面倒くさい\n    - リポジトリが手元にある必要がある\n- Headless CMSの場合\n    - Webフォームで入力する。そこまで面倒じゃない\n        - 画面開いてログインするのは面倒くさい\n    - ブラウザがあればpublishできるのでポータビリティはある\n    - Headless CMSのほうが記事を書くための心理的障壁が下がるかなと思う。\n\n#### Contentful\n- UIの分かりやすさはある。探してるものがすぐ見つかる\n    - 編集画面はちょっと狭くて好きではない\n    - publishDate、デフォで現在時刻を入れてて欲しい\n- Firefox だとコンソールにエラーがでまくってて、そのせいか vim-vixen が動かず、そこが不満ではある…\n- 他にもさらっと候補を調べてみたけどそこまで時間かけなくていいかと思った程度\n\n#### Gatsby\n- tutorial 分かりやすい。React を触ったことがあればすいすい進む\n- GraphiQL がついてくるので、クエリの結果を確かめるのが簡単\n- plugin をもりもり入れる\n  - gatsby-config.js が太るし、ここに Graphql のクエリを書く場合もあり、リッチなものを作ろうと思ったらつらくなりそう\n- Markdown ファイルと Contentful を併存させようとして遭遇したエラーがちょっと分かりにかった\n  - 結局 Markdown は Contentful に手作業で移行した…\n"},"title":"Gatsby + Contentful on GitHub Pages","slug":"gatsby_contentful_gh_pages","updatedAt":"2020-09-06T00:57:02.100Z"}}},
    "staticQueryHashes": ["2390137347","3000541721"]}