{"componentChunkName":"component---src-templates-blog-post-js","path":"/javadaytokyo2018","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"Java Day Tokyo 2018","updatedAt":"2020/09/01 15:46:37 +00:00","body":{"childMarkdownRemark":{"excerpt":"メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracleアカウント、個人のやつだしね…。 メモと感想です(後でスライドが公開されるだろうけど)。 key note…","html":"<p>メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracleアカウント、個人のやつだしね…。</p>\n<p>メモと感想です(後でスライドが公開されるだろうけど)。</p>\n<h2>key note</h2>\n<ul>\n<li>リリースモデルについて、わかりやすいけどOpenJDKはLTS出ないのね</li>\n<li>\n<p>jdk11が今年9月に出る(予定通り)</p>\n<ul>\n<li>JEPsはこれからも追加される</li>\n</ul>\n</li>\n<li>\n<p>mission controll と flight recorder</p>\n<ul>\n<li>\n<p>Eclipse pluginで開けて便利</p>\n<ul>\n<li>下部のペインにスタックトレースからコードにジャンプできる</li>\n</ul>\n</li>\n<li>\n<p>パフォーマンスの問題3例での見え方</p>\n<ul>\n<li>LinkedListのループ内のget</li>\n<li>\n<p>シングルトンインスタンス(ロガーとか)</p>\n<ul>\n<li>これどういうシチュエーションの問題だっけ</li>\n</ul>\n</li>\n<li>\n<p>ループ内でオートボクシングが発生しててGC走りまくってる</p>\n<ul>\n<li>\n<p>赤いアイコン出ないので問題なさそうに見えるので注意</p>\n<ul>\n<li>どう気づけばいいんだ？</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>リリース未定だったりする新しい機能</p>\n<ul>\n<li>Valhalla</li>\n<li>Portola</li>\n<li>Panama</li>\n<li>Amber</li>\n<li>Loom</li>\n<li>ZGC</li>\n</ul>\n</li>\n<li>\n<p>fn</p>\n<ul>\n<li>サーバレス</li>\n<li>\n<p>cli</p>\n<ul>\n<li>ボイラープレートを吐いたり</li>\n<li>\n<p>ローカルサーバ起動できたり</p>\n<ul>\n<li>個人的にこれがすごく良いと思う</li>\n</ul>\n</li>\n<li>アプリをデプロイできたり</li>\n</ul>\n</li>\n<li>\n<p>javaで単一の処理で書けてしまうが、裏では複数のコンテナが実行されてるやつのデモ</p>\n<ul>\n<li>flickrから車の写真を集めてきて最終的にslackにポストしまくる</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Java in a Wolrd of Containers</h2>\n<ul>\n<li>翻訳レシーバの付け方がわからなくて英語で聞いてみたけどやっぱり翻訳必要だな…</li>\n<li>jlink, jdeps</li>\n<li>musl libc</li>\n<li>portola</li>\n<li>AppCDSでコンテナ間のクラスデータのシェア</li>\n<li>Dockerの設定を考慮するJava起動オプションのサポート</li>\n<li>適切なbase imageを使うとサイズの軽量化できる</li>\n</ul>\n<h2>Project Valhalla</h2>\n<ul>\n<li>Value Types</li>\n<li>Generics Specialization</li>\n<li>Var Handles</li>\n<li>\n<p>名前の由来</p>\n<ul>\n<li>Value Typesと似てるっしょ</li>\n</ul>\n</li>\n<li>\n<p>シンタックス</p>\n<ul>\n<li>例えばこんなの</li>\n<li><code class=\"language-text\">value class Hoge { }</code></li>\n</ul>\n</li>\n<li>\n<p>クラスのように書けてプリミティブのように振る舞う</p>\n<ul>\n<li>\n<p>ヘッダがない</p>\n<ul>\n<li>\n<p>オブジェクトのメタ情報</p>\n<ul>\n<li>何のインスタンスなのかとか</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>モニタがない</p>\n<ul>\n<li>ロックの情報</li>\n</ul>\n</li>\n<li>\n<p>キャッシュミスしない</p>\n<ul>\n<li>これはどういう理屈だっけ…</li>\n</ul>\n</li>\n<li>“What Would Int Do”</li>\n</ul>\n</li>\n<li>\n<p>ジェネリクス</p>\n<ul>\n<li>どう扱えるの？</li>\n<li><code class=\"language-text\">List&lt;int&gt; list = ...</code></li>\n</ul>\n</li>\n<li>IntStreamとかToIntFunctionとかなくせる</li>\n<li>\n<p>クラスの継承ツリー</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-- any(仮)\n |- primitive(int/long/...)\n |- Object\n      | - ...</code></pre></div>\n<ul>\n<li>このany(仮)をバイトコードでどう表現するのとか悩んでるらしい</li>\n</ul>\n</li>\n<li>\n<p>VarHandles</p>\n<ul>\n<li>Unsafeで扱えたメモリ操作ができる</li>\n</ul>\n</li>\n<li>\n<p>余談</p>\n<ul>\n<li>メモリバリア</li>\n<li>\n<p>volatile</p>\n<ul>\n<li>この辺理解できてない</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Curing you Domain Model Anemia…</h2>\n<ul>\n<li>\n<p>DDDに触れてからのコードスメル</p>\n<ul>\n<li>フォーカスする話題の粒度が真逆というか振り幅がでかいというか</li>\n</ul>\n</li>\n<li>\n<p>Martin Fowlerの”When to make a type”</p>\n<ul>\n<li>疑問に思ったらクラスを作れ</li>\n</ul>\n</li>\n<li>\n<p>ライブコーディング！</p>\n<ul>\n<li>githubやyoutubeにサンプルあるから探してくれ</li>\n<li>\n<p>dddするときのモデルに特定のフレームワークを使っても(よい|ダメ)派がある</p>\n<ul>\n<li>使ってもいい派</li>\n<li>今回はjpaのエンティティをモデルとして扱う</li>\n</ul>\n</li>\n<li>\n<p>ex. 「primitiveなフィールド、マイナスにしたくない」</p>\n<ul>\n<li>\n<p>オブジェクトにしちゃう</p>\n<ul>\n<li>\n<p>イミュータブルにする</p>\n<ul>\n<li>\n<p>コンストラクタはprivateにして、static factoryを作る</p>\n<ul>\n<li>その中で引数の検査をする</li>\n</ul>\n</li>\n<li>getterで参照を返すときはコピーを返そう</li>\n</ul>\n</li>\n<li>hashcode/eqaulsの実装忘れずに</li>\n<li>toStringはデバッグ情報を出すようにすべき</li>\n<li>\n<p>Formattable知ってる？</p>\n<ul>\n<li>ビジネス要件での出力</li>\n<li>国際化するときも使える、詳しくはjavadoc</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ComparisonChain使ってたけどよく知らない、何がうれしいか調べておく</li>\n<li>\n<p>enumコンストラクタはjava8での書き方があるらしい</p>\n<ul>\n<li>今回は時間の都合でjava7のやり方（おなじみやつ）</li>\n<li>コードサンプル調べておく</li>\n</ul>\n</li>\n<li>\n<p>JPAでのtips</p>\n<ul>\n<li>\n<p>イミュータブルなエンティティにするには</p>\n<ul>\n<li>コンストラクタはprotected</li>\n</ul>\n</li>\n<li>\n<p>フィールドにオブジェクトを持つ場合</p>\n<ul>\n<li>それがバリューオブジェクトだったら@ElementCollection</li>\n<li>エンティティだったらいつもの@OneToManyなど</li>\n<li>件数が数件程度ならバリューオブジェクト、100件とかになったらエンティティにしたほうがよい</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Get ready for a cloud native…</h2>\n<ul>\n<li>k8s + istio でコンテナのメトリクスを簡単に取得できる話</li>\n<li>\n<p>k8sで環境ごとのurlを用意しなくてよくなる</p>\n<ul>\n<li>アプリ側で使うのは論理的なURL</li>\n</ul>\n</li>\n<li>\n<p>サイドカーコンテナ</p>\n<ul>\n<li>mainコンテナとproxyコンテナのセット</li>\n</ul>\n</li>\n<li>istio使うとgrafanaでモニタリングのダッシュボードが表示される</li>\n<li>eclipse micro profile</li>\n<li>server.xml</li>\n<li>\n<p>リクエストに関する設定(ルール)</p>\n<ul>\n<li>コネクションタイムアウト</li>\n<li>\n<p>レスポンスのディレイ設定</p>\n<ul>\n<li>テストしやすくてよい！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>リクエストヘッダにtrace-idみたいなのがついている</p>\n<ul>\n<li>これを追うとどのコンテナを通っていったか追跡できる</li>\n</ul>\n</li>\n<li>\n<p>サーキットブレーカーという単語が出てきたけど、それが何だっていうところ聞き逃した…</p>\n<ul>\n<li>言葉の意味は「一時的に止める措置」？</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">service meshes: key takeaways\n- transparently add technical cross-cutting concerns.\n- think &quot;AOP for applications&quot;\n- routing, load-balancing, resiliency, telemetry, auth\n- integrates well with Java enterprise approach:\n    - business logic is responsibility of the applications\n    - technical concerns are part of the envioronment</code></pre></div>\n<h3>全体的に</h3>\n<ul>\n<li>Cloudというかコンテナ周りというかにフォーカスされているのを確認した。</li>\n<li>\n<p>面白かったのは新しい機能だったり普段の暮らしに近いコーディング周りだったり。</p>\n<ul>\n<li>DDDは座学な印象あるけど実地で見せてもらうと楽しい。</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"javadaytokyo2018","previous":{"body":{"body":"職務経歴書に自己PRがないと指摘され、自分のよわみはすぐ書けるがつよみは書きにくい…と悩んだ末、自己紹介を書くことで代わりになるのでは、さらにブログの記事だったらより書きやすいはず、と思いました。\n\n1. プログラマーになろうと思ったきっかけ\n1. 好ましいと思っていること、大事にしたいこと\n\nこの辺が書ければ自己PRとしてもよいのでは。\n\n### プログラマーになろうと思ったきっかけ\n当時の僕は特に目指すものもなく派遣スタッフとして働いており、エクセルで住所データを加工する仕事をしていました。ショートカットキーを覚えてしまえばすぐ終わる仕事であったので、持て余した時間でVBAを覚えました。ここで初めてプログラミングの基礎を習得したのですが、新しいことを覚える楽しさ以外にも、高速化テクニックを試したり、他の言語ではどういう書き方をするのか調べたり（VBAは明らかに機能が少なく不自由だった）、学んだことがすぐ活かせるというのも面白く、なにより自分の書いたものが動くことは楽しい、原始的な喜びがあると気づきました。\n\nその職場では一応意味のあるものを作ることができて、それはエクセルブックから外字を検出するといったものでした（最終的に印字することが目的なので、事前に検出できることには意味がありました）。そのとき参考にしたのが「詳解正規表現」で（俗にいうところのフクロウ本）、初心者が読むにはちょっと難しかったんですが、体系的に知識を得るには（ちょっと背伸びしてでも）技術書というものを読むのが早いということを知りました。そんな感じで、こんな楽しいことが仕事になるんだったらいいなと次第に考えるようになりました。\n\nその頃、以下の記事を読んだのもその気になった原因のひとつと思います。\n\n- [プログラマになりたいあなたへの手紙 - プログラマになりたいあなたへ：ITpro](http://itpro.nikkeibp.co.jp/article/COLUMN/20090324/327115/?rt=nocnt)\n- [知らないと損する職業訓練 - phaの日記](http://pha.hateblo.jp/entry/20080429/1209464163)\n\nその後、職業訓練を経て、未経験OKな派遣業を営むSIerに拾ってもらうことができました。\n\n### 好ましいと思っていること、大事にしていること\nプログラマーとして働いていて気にしていることです。当たり前といえば当たり前のことではある。\n\n- テキストを好んで使うこと\n    - ドキュメントもインフラも何でもテキストで表現したらdiffも取れるしgitで管理できていいね、くらいの意味\n        - wordやエクセルで管理するのはウッと思う\n        - 人によってはマークダウンの書式が構造化された文書に見えないかもしれない（プレビューが必須だと面倒臭さが先に立ってしまう）\n- チーム全体で合意を取ること\n    - プロダクトは自分たちで作っていくという意識を持てる\n- ツールやWebサービスを取り入れること\n    - どんどん便利になっていきたい\n- 自動化\n    - どんどん便利になっていきたい\n    - 時間を生むので圧倒的に正しい\n        - 運用系のツールもどんどん取り入れたいのだけど、チームの合意がないまま使い始めるとつらいはずなので、おすすめしていく運動とセットだよなと思っている\n- 便利になること\n    - プログラマとしての使命だと思う\n- 名前付け\n    - Matzの「名前重要」の教えを念頭に\n    - クラス設計の第一歩と思っている\n        - この辺がgolang難しい（クラスがない、ファイル分割をどの単位でやっていいのかなど）\n- 目的を見失わないこと\n    - 議論が停滞したりちょっと逸れてきたなというとき「どうすれば勝ちなんだっけ」と言うことにしてる\n\n### 以上です\n的外れな感じになっていませんように…。\n"},"title":"自己紹介ブログ","slug":"about-me","updatedAt":"2020-09-01T15:45:20.522Z"},"next":{"body":{"body":"- 今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。\n- 就職活動でGitHubのURLを乗せても、READMEに書くのは簡単な説明と使い方くらいなので分かりにくいと思うので…。\n    - 主に「なぜ作るのか」、「何を学んだか」\n    - 基本的には、自分の問題を解決するため\n        - 次に、興味のあるライブラリなどを試すため\n\n## [ie-ignore-slide](https://github.com/fourside/ie-ignore-slide)\n- スライドのライブラリ\n- polyfill使えばいいのだけど完全に個人用なのでIEを無視することに\n\n#### 背景\n- パワーポイントを使いたくなさすぎて自作した\n\n#### 学んだ技術\n- WebComponents\n    - 当時ようやくFirefoxで使えるようになったのと、技術書典でWebComponentsの本を買ったことが理由\n\n#### 工夫\n- 地味にプログレスバーを用意してLTに便利なようにしてる\n\n#### 改善点\n- CSSアニメーションをもっとスライドらしくしたい\n- コンポーネントにあてるCSSをきれいに書けずもどかしい\n- npm publishしたほうが使いやすい\n\n## [podcast](https://github.com/fourside/podcast)\n\n- 録音したものをpodcast形式で配信するアプリケーション\n- だいぶ前に作っていて今でもずっと使い続けており、最近コンテナ化した\n\n#### 背景\n- ラジオが好きなので個人用のアーカイブ\n\n#### 学んだ技術\n- docker\n    - もともと素朴に作っていたものをコンテナ化した\n    - そうすることでミドルウェアの設定などもgitで管理できるようになり、ポータビリティが得られた\n    - logging driverでログ収集することでfluentdクライアント不要になるところがよい\n\n#### 工夫\n- docker-compose.ymlを開発用と本番用に分けたところ\n    - 本番用にはfluentd/mongodbを足して、ログの集積をしている\n\n#### 改善点\n- 集積したログを閲覧・検索したり、監視したりする仕組みを用意したい\n\n## [videoserver](https://github.com/fourside/videoserver)\n- youtubeから動画をダウンロードしてpodcastとして配信する\n\n#### 背景\n- テック系の動画を通勤中に見れるように\n- podcastとして管理すると未読管理が楽になる\n- 結局はmusic videoがメインになってしまった\n\n#### 学んだ技術\n- バックエンドはgolang\n    - goroutine, channelの基本的な使い方\n    - パッケージ管理はいろいろ変遷があったようだがdepを使うようにした\n    - ビルドにはmakeを使い、静的解析をするようにした\n- フロントエンドはreact\n    - 途中でhooksに書き換えてみたり、reduxに入門したりした\n    - ビルドツールはparcelにした\n        - 勝手に必要なものが裏で揃えられるので楽だけど、たまにうまく行かなくなるときがある…\n        - 小さく始めるときの最初のビルドツールとして最適だと思った\n    - web workerも使ってみた\n\n#### 工夫\n- polling処理でダウンロードの進捗表示をするところ\n    - バックエンドはgoroutineからyoutube-dlの標準出力を抜き取ってレスポンスを返す\n    - フロントエンドはWebWorkerでサーバリクエストを送り、メインスレッドにサーバレスポンスの一部を返す\n\n#### 改善点\n- 削除APIができていない\n    - DBを使ってない（ファイルシステムを直接見てレスポンスを作っている）ので、一意にしにくい\n- reduxを使い始めたが、きちんと理解した感じがしない\n    - ミドルウェアまで入れたくない気持ちがあるが実際はどうなのか\n- 字幕情報をダウンロードできるのだが、動画に埋め込むとき字幕表示がきれいではない\n\n## [meigaza](https://github.com/fourside/meigaza)\n- スクレイピング結果をslackやスマホに通知してくれるスクリプト\n\n#### 背景\n- 映画をよく見るようになった\n    - 東京にある名画座のスケジュールを簡単に知りたくなった\n    - 気づいたら前売り券を買える期間が過ぎていた\n\n#### 学んだ技術\n- puppeteerによるスクレイピング\n- aws lambdaのカスタムランタイム\n- iftttでの通知\n\n#### 工夫\n- 最初は常駐型のボットを実装しようと思ったが、スケジュールでキックされるAWS Lambdaで実現できたこと\n\n#### 改善点\n- cliでデプロイできるようにしたい\n\n## [mock-server](https://github.com/fourside/mock-server)\n- リクエストパスとサーバローカルのファイルをマッピングするサーバ\n\n#### 背景\n- フロントエンド(SPA)の開発でモックサーバが欲しくなった\n    - 特にページャの実装で、特定のクエリ文字列を含むURLのとき、それっぽいJSONを返してほしい\n    - nginxのlocationはクエリまで含めて判定してくれない\n    - 軽く探しても欲しい物はなさそうだったので、自分で書くことにした\n\n#### 学んだ技術\n- node.jsでのサーバの書き方\n\n#### 工夫\n- ライブラリを使わないようにnodeのapiだけで作ってみた\n    - 使うときnpm installする必要がなくなって、シンプルなものになった\n- 普通に作ると起動時だけ設定ファイルを読むように作るが、フロントエンドの開発をしやすいようにリクエストの度に設定ファイルを読むようにした\n\n#### 改善点\n- typescript化\n- テストがない\n    - ルーティング定義のファイルを実行時引数で渡せるようにしないとな…\n- 公開ディレクトリに置かれたファイル（webpackなどのビルド成果物）の変更検知して、ブラウザをリロードしたい\n\n## [modal_sample](https://github.com/fourside/modal_sample)\n- よくあるモーダル画面のサンプル実装\n\n#### 背景\n- 仕事でモーダル画面が必要になったがライブラリを使わず実装したかった\n\n#### 学んだ技術\n- よくあるモーダルの実装方法\n    - 世の中のモーダルはどう実装されているのか、いろいろ調べてみるとだいたい同じだったのでそのように実装した\n- cssアニメーションの基礎\n\n#### 工夫\n- ライブラリを使わずvanillaに作ること\n- WindowsのインターネットオプションによってIEではlocalStorageが無効にできるので、Nullオブジェクトを用意した\n\n#### 改善点\n- 特になし\n\n## [elecron](https://github.com/fourside/elecron)\n- 指定したスケジュールで任意のURLを開く常駐アプリ\n\n#### 背景\n- 物理的な勤怠打刻からWebの打刻に移行した際、打刻を忘れてしまうという話を聞いた\n    - 出退勤の時間になったらブラウザで打刻用のサイトを開くアプリを作ろうと思った\n\n#### 学んだ技術\n- electron\n- vue\n- webpack\n\n#### 工夫\n- windows向けに作ったのでappveyorを使ってみた\n\n#### 改善点\n- cronの書式が分かりにくい（がパターンの表現力は高いので、完全に置き換えるものは思いつかず…）\n- コンポーネントが大きいので分割したい\n    - 1個のFormを分割するのは冗長な部分が増えそうで躊躇してしまう\n"},"title":"作ったものの説明","slug":"desc_repo","updatedAt":"2020-09-01T15:48:20.184Z"}}},"staticQueryHashes":["2390137347","3000541721"]}