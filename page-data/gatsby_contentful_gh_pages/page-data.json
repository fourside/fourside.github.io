{"componentChunkName":"component---src-templates-blog-post-js","path":"/gatsby_contentful_gh_pages","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"Gatsby + Contentful on GitHub Pages","publishDate":"2020/09/02 08:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"fourside.github.io を jekyll で構築していたけど、gatsby に鞍替えした。モチベーションは gatsby を触ってみたかったというくらい。 やったこと なるべくシンプルにしたかったので、オフィシャルのスターターである gatsbyjs/gatsby-starter-blog…","html":"<p>fourside.github.io を jekyll で構築していたけど、gatsby に鞍替えした。モチベーションは gatsby を触ってみたかったというくらい。</p>\n<h3>やったこと</h3>\n<p>なるべくシンプルにしたかったので、オフィシャルのスターターである <a href=\"https://github.com/gatsbyjs/gatsby-starter-blog\">gatsbyjs/gatsby-starter-blog</a> を使った。とはいえSEOとかオフライン対応とかもろもろ入っているので便利。</p>\n<p>自分でカスタマイズしたのはこれくらい。移行元となるべく機能差異ないようにした（そんな機能もりもりじゃないけども…）。基本的にプラグインを入れて設定をするだけ。</p>\n<ul>\n<li>自分のアイコンは Gravatar からひっぱってきた</li>\n<li>Gist を展開するようにした</li>\n<li>RSS feedを吐くようにした</li>\n<li>自動でデプロイされるようにした</li>\n</ul>\n<p>自動デプロイについて。Contentful で publish したら走るようにした。 jekyllだと mdファイルをpushしたらGitHub Pagesが自動でビルドしてくれるが、Gatsby + Headless CMS だと、ビルド時に CMS から記事を取得しなくてはならない。具体的には Contentful Webhook と GitHub Actions の組み合わせ。Contentful で記事を操作したら GitHub API にリクエストが飛ぶようにする(<a href=\"https://www.contentful.com/developers/docs/concepts/webhooks/\">Webhooks | Contentful</a>)。GitHub Action で、そのリクエストが飛んできたらビルドとデプロイが走るようにする。</p>\n<p><del>デプロイは、<a href=\"https://www.npmjs.com/package/gh-pages\">gh-pages</a> を使うだけ。GitHub Pagesのブランチを <code class=\"language-text\">gh-pages</code> にしておいて、ビルド成果物だけを push する。</del> GitHub Actions では <a href=\"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token\">peaceiris/actions-gh-pages</a> を使うようにした（直接 gh-pages を使うと <code class=\"language-text\">fatal: empty ident name (for &lt;runner@fv-az60.xxxxxxxxxxxxxxxxxxxxxxxxxx.cx.internal.cloudapp.net&gt;) not allowed</code> なんて怒られてしまう。これには workflow 内で自動生成される GITHUB_TOKEN が必要らしいのだけど、便利な action (<a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a>)があるので使わせてもらった。）</p>\n<p>GitHub Actions のドキュメントは以下を参照した。日本語版だとデッドリンクがあったりURLのフラグメントが設定されてなかったりする。余談だけどドキュメントの規模が大きくなったとき、一部だけ見て理解できるようにコンテキストを少なくして作成できたらいいだろうなと思うものの、もともとボリュームが大きいのでできるだけスリムに書きたいとも思うし、塩梅は難しいな。</p>\n<ul>\n<li>\n<p><a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch\">Events that trigger workflows - GitHub Docs</a></p>\n<ul>\n<li><code class=\"language-text\">repository_dispatch</code> イベントを発生させるとworkflowをキックできるみたい</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event\">Repositories - GitHub Docs</a></p>\n<ul>\n<li>上記イベントを発生させる GitHub API</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\">Creating a personal access token - GitHub Docs</a></p>\n<ul>\n<li>外部サイトの Webhook に与える認証について</li>\n<li>一年で revoke されるっぽいので、ブログ更新を一年サボると動かなくなる</li>\n<li>今回は repo > public_repo でよい</li>\n<li>\n<p>その乗せ方</p>\n<ul>\n<li><a href=\"https://docs.github.com/en/rest/overview/resources-in-the-rest-api#oauth2-token-sent-in-a-header\">Resources in the REST API - GitHub Docs</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.github.com/v3/#user-agent-required\">GitHub API v3 | GitHub Developer Guide</a></p>\n<ul>\n<li>GitHub APIは、User-Agent ヘッダがないとエラーになるみたい。なんか適当なのを入れておく</li>\n</ul>\n</li>\n</ul>\n<h3>misc</h3>\n<p>それぞれ触ってみての感想</p>\n<h4>Headless CMS</h4>\n<p>なんで Headless CMS にしたか。ローカルにファイル作ってもいいかとも思ったけど、知らないものは触っておくことにした。後付で理由も考えてみたけど…。</p>\n<ul>\n<li>\n<p>jekyllの場合</p>\n<ul>\n<li>ディレクトリやファイル名で記事のURLが決まる。面倒くさい</li>\n<li>リポジトリが手元にある必要がある</li>\n</ul>\n</li>\n<li>\n<p>Headless CMSの場合</p>\n<ul>\n<li>\n<p>Webフォームで入力する。そこまで面倒じゃない</p>\n<ul>\n<li>画面開いてログインするのは面倒くさい</li>\n</ul>\n</li>\n<li>ブラウザがあればpublishできるのでポータビリティはある</li>\n<li>Headless CMSのほうが記事を書くための心理的障壁が下がるかなと思う。</li>\n</ul>\n</li>\n</ul>\n<h4>Contentful</h4>\n<ul>\n<li>\n<p>UIの分かりやすさはある。探してるものがすぐ見つかる</p>\n<ul>\n<li>編集画面はちょっと狭くて好きではない</li>\n<li>publishDate、デフォで現在時刻を入れてて欲しい</li>\n</ul>\n</li>\n<li>Firefox だとコンソールにエラーがでまくってて、そのせいか vim-vixen が動かず、そこが不満ではある…</li>\n<li>他にもさらっと候補を調べてみたけどそこまで時間かけなくていいかと思った程度</li>\n</ul>\n<h4>Gatsby</h4>\n<ul>\n<li>tutorial 分かりやすい。React を触ったことがあればすいすい進む</li>\n<li>GraphiQL がついてくるので、クエリの結果を確かめるのが簡単</li>\n<li>\n<p>plugin をもりもり入れる</p>\n<ul>\n<li>gatsby-config.js が太るし、ここに Graphql のクエリを書く場合もあり、リッチなものを作ろうと思ったらつらくなりそう</li>\n</ul>\n</li>\n<li>\n<p>Markdown ファイルと Contentful を併存させようとして遭遇したエラーがちょっと分かりにかった</p>\n<ul>\n<li>結局 Markdown は Contentful に手作業で移行した…</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"gatsby_contentful_gh_pages","previous":{"body":{"body":"- 今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。\n- 就職活動でGitHubのURLを乗せても、READMEに書くのは簡単な説明と使い方くらいなので分かりにくいと思うので…。\n    - 主に「なぜ作るのか」、「何を学んだか」\n    - 基本的には、自分の問題を解決するため\n        - 次に、興味のあるライブラリなどを試すため\n\n## [ie-ignore-slide](https://github.com/fourside/ie-ignore-slide)\n- スライドのライブラリ\n- polyfill使えばいいのだけど完全に個人用なのでIEを無視することに\n\n#### 背景\n- パワーポイントを使いたくなさすぎて自作した\n\n#### 学んだ技術\n- WebComponents\n    - 当時ようやくFirefoxで使えるようになったのと、技術書典でWebComponentsの本を買ったことが理由\n\n#### 工夫\n- 地味にプログレスバーを用意してLTに便利なようにしてる\n\n#### 改善点\n- CSSアニメーションをもっとスライドらしくしたい\n- コンポーネントにあてるCSSをきれいに書けずもどかしい\n- npm publishしたほうが使いやすい\n\n## [podcast](https://github.com/fourside/podcast)\n\n- 録音したものをpodcast形式で配信するアプリケーション\n- だいぶ前に作っていて今でもずっと使い続けており、最近コンテナ化した\n\n#### 背景\n- ラジオが好きなので個人用のアーカイブ\n\n#### 学んだ技術\n- docker\n    - もともと素朴に作っていたものをコンテナ化した\n    - そうすることでミドルウェアの設定などもgitで管理できるようになり、ポータビリティが得られた\n    - logging driverでログ収集することでfluentdクライアント不要になるところがよい\n\n#### 工夫\n- docker-compose.ymlを開発用と本番用に分けたところ\n    - 本番用にはfluentd/mongodbを足して、ログの集積をしている\n\n#### 改善点\n- 集積したログを閲覧・検索したり、監視したりする仕組みを用意したい\n\n## [videoserver](https://github.com/fourside/videoserver)\n- youtubeから動画をダウンロードしてpodcastとして配信する\n\n#### 背景\n- テック系の動画を通勤中に見れるように\n- podcastとして管理すると未読管理が楽になる\n- 結局はmusic videoがメインになってしまった\n\n#### 学んだ技術\n- バックエンドはgolang\n    - goroutine, channelの基本的な使い方\n    - パッケージ管理はいろいろ変遷があったようだがdepを使うようにした\n    - ビルドにはmakeを使い、静的解析をするようにした\n- フロントエンドはreact\n    - 途中でhooksに書き換えてみたり、reduxに入門したりした\n    - ビルドツールはparcelにした\n        - 勝手に必要なものが裏で揃えられるので楽だけど、たまにうまく行かなくなるときがある…\n        - 小さく始めるときの最初のビルドツールとして最適だと思った\n    - web workerも使ってみた\n\n#### 工夫\n- polling処理でダウンロードの進捗表示をするところ\n    - バックエンドはgoroutineからyoutube-dlの標準出力を抜き取ってレスポンスを返す\n    - フロントエンドはWebWorkerでサーバリクエストを送り、メインスレッドにサーバレスポンスの一部を返す\n\n#### 改善点\n- 削除APIができていない\n    - DBを使ってない（ファイルシステムを直接見てレスポンスを作っている）ので、一意にしにくい\n- reduxを使い始めたが、きちんと理解した感じがしない\n    - ミドルウェアまで入れたくない気持ちがあるが実際はどうなのか\n- 字幕情報をダウンロードできるのだが、動画に埋め込むとき字幕表示がきれいではない\n\n## [meigaza](https://github.com/fourside/meigaza)\n- スクレイピング結果をslackやスマホに通知してくれるスクリプト\n\n#### 背景\n- 映画をよく見るようになった\n    - 東京にある名画座のスケジュールを簡単に知りたくなった\n    - 気づいたら前売り券を買える期間が過ぎていた\n\n#### 学んだ技術\n- puppeteerによるスクレイピング\n- aws lambdaのカスタムランタイム\n- iftttでの通知\n\n#### 工夫\n- 最初は常駐型のボットを実装しようと思ったが、スケジュールでキックされるAWS Lambdaで実現できたこと\n\n#### 改善点\n- cliでデプロイできるようにしたい\n\n## [mock-server](https://github.com/fourside/mock-server)\n- リクエストパスとサーバローカルのファイルをマッピングするサーバ\n\n#### 背景\n- フロントエンド(SPA)の開発でモックサーバが欲しくなった\n    - 特にページャの実装で、特定のクエリ文字列を含むURLのとき、それっぽいJSONを返してほしい\n    - nginxのlocationはクエリまで含めて判定してくれない\n    - 軽く探しても欲しい物はなさそうだったので、自分で書くことにした\n\n#### 学んだ技術\n- node.jsでのサーバの書き方\n\n#### 工夫\n- ライブラリを使わないようにnodeのapiだけで作ってみた\n    - 使うときnpm installする必要がなくなって、シンプルなものになった\n- 普通に作ると起動時だけ設定ファイルを読むように作るが、フロントエンドの開発をしやすいようにリクエストの度に設定ファイルを読むようにした\n\n#### 改善点\n- typescript化\n- テストがない\n    - ルーティング定義のファイルを実行時引数で渡せるようにしないとな…\n- 公開ディレクトリに置かれたファイル（webpackなどのビルド成果物）の変更検知して、ブラウザをリロードしたい\n\n## [modal_sample](https://github.com/fourside/modal_sample)\n- よくあるモーダル画面のサンプル実装\n\n#### 背景\n- 仕事でモーダル画面が必要になったがライブラリを使わず実装したかった\n\n#### 学んだ技術\n- よくあるモーダルの実装方法\n    - 世の中のモーダルはどう実装されているのか、いろいろ調べてみるとだいたい同じだったのでそのように実装した\n- cssアニメーションの基礎\n\n#### 工夫\n- ライブラリを使わずvanillaに作ること\n- WindowsのインターネットオプションによってIEではlocalStorageが無効にできるので、Nullオブジェクトを用意した\n\n#### 改善点\n- 特になし\n\n## [elecron](https://github.com/fourside/elecron)\n- 指定したスケジュールで任意のURLを開く常駐アプリ\n\n#### 背景\n- 物理的な勤怠打刻からWebの打刻に移行した際、打刻を忘れてしまうという話を聞いた\n    - 出退勤の時間になったらブラウザで打刻用のサイトを開くアプリを作ろうと思った\n\n#### 学んだ技術\n- electron\n- vue\n- webpack\n\n#### 工夫\n- windows向けに作ったのでappveyorを使ってみた\n\n#### 改善点\n- cronの書式が分かりにくい（がパターンの表現力は高いので、完全に置き換えるものは思いつかず…）\n- コンポーネントが大きいので分割したい\n    - 1個のFormを分割するのは冗長な部分が増えそうで躊躇してしまう\n"},"title":"作ったものの説明","slug":"desc_repo","updatedAt":"2020-09-01T15:48:20.184Z"},"next":null}},"staticQueryHashes":["2390137347","3000541721"]}