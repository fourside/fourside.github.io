{"componentChunkName":"component---src-templates-blog-post-js","path":"/intersection_observer_api","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"Intersection Observer API でサイドメニューの状態変化","publishDate":"2020/09/09 07:30:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"作ったもの fourside/vanila_scroollspy\nintersection observable api モチベーション Intersection Observer API を使う処理の素振り サイドメニューの expand / collapse を実装してみた Infinity Scroll…","html":"<h3>作ったもの</h3>\n<ul>\n<li><a href=\"https://github.com/fourside/vanila_scroollspy\">fourside/vanila_scroollspy</a>\n<img src=\"//images.ctfassets.net/2zg7j2cy03uu/6Sdv5J3zHP2mead2qgs0q7/081957eaf3b8b3d08f89c343910ece57/intersection_observable_api.gif\" alt=\"intersection observable api\"></li>\n</ul>\n<h3>モチベーション</h3>\n<ul>\n<li>Intersection Observer API を使う処理の素振り</li>\n<li>サイドメニューの expand / collapse を実装してみた</li>\n<li>\n<p>Infinity Scroll の場合は以前試したことがある</p>\n<ul>\n<li><a href=\"https://github.com/fourside/filmemo/blob/develop/src/hooks/useIntersect.ts\">filmemo/useIntersect.ts</a></li>\n</ul>\n</li>\n</ul>\n<h3>参照</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/Intersection_Observer_API\">Intersection Observer API - Web API | MDN</a></li>\n<li>\n<p><a href=\"https://ics.media/entry/190902/\">JSでのスクロール連動エフェクトにはIntersection Observerが便利 - ICS MEDIA</a></p>\n<ul>\n<li>オプションについての説明が分かりやすい</li>\n<li>やりたかったこと全部ここにあるのよね…</li>\n</ul>\n</li>\n</ul>\n<h3>素振りについて</h3>\n<ul>\n<li>こういった素振りをする行為は大事だなと思っていて、ちょっと前にやった案件でモーダルを出したくなったとき、以前バニラでモーダル実装したことがあったので、さっと作ることができた</li>\n<li>なんとなくAPIを知っているくらいの状態だと、いざ必要になったときに調査のフェーズが挟まるし、見積もりも余計にバッファを積んでしまう</li>\n<li>\n<p>一回自分で作っておくと、これくらいの実装で可能だというのが分かるし、最低でも記憶のインデックスになる</p>\n<ul>\n<li>他のライブラリに依存しないで作れると他の環境でも応用しやすい</li>\n</ul>\n</li>\n<li>今回のは CSS アニメーションに手こずったけれどもね…</li>\n</ul>"}}}},"pageContext":{"slug":"intersection_observer_api","previous":{"body":{"body":"- [fourside/postalcodesearch](https://github.com/fourside/postalcodesearch)\n\n```bash\n$ curl -s https://xxxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/prod/addresses/1000001 | jq .\n[\n  {\n    \"zipcode\": \"1000001\",\n    \"address1\": \"東京都\",\n    \"address2\": \"千代田区\",\n    \"address3\": \"千代田\",\n    \"kana1\": \"とうきょうと\",\n    \"kana2\": \"ちよだく\",\n    \"kana3\": \"ちよだ\"\n  }\n]\n```\n\n- 元になるデータは [zipcloud の加工済み csv ファイル](http://zipcloud.ibsnet.co.jp/) を使った。ありがたく使わせてもらっています\n  - zipcloud でも　WebAPI を公開してるのだけどなるべく自前でホストしたいと思って実装した\n\n### 構成\n- いわゆるサーバレス\n- aws-cdk\n    - Lambda Function\n    - API Gateway\n    - DynamoDB\n- ちょこちょこ考えなきゃいけないところがあったのでメモしていきます\n\n### DynamoDB のテーブル設計\n- 「データをどう使うか」から設計を始める\n- 郵便番号をキーに検索するので、パーティションキーは郵便番号にする\n- ただし郵便番号はユニークではない。ひとつの郵便番号に複数の住所が紐付くパターンがある\n- ソートキーが必要になるが、ふさわしい CSV のカラムはない\n    - 住所1や住所2だと重複するし、住所3だと空文字になる\n    - 住所1、住所2、住所3を連結して、ソートキーとした\n    - それでさえ重複するケースがあるので、データ投入時にパーティションキー + ソートキーでユニークにする必要がある\n        - 例: 0741273 北海道 深川市 音江町\n\n### データ投入\n- `cdk deploy` にからめて実行できればと考えたけど、何度も実行する必要はないのでコマンドを分けた\n- データ量は、ざっくり13万件弱\n- [BatchWriteItem](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html)\n    - 一度に複数レコードを書き込める API を使う\n    - ただし25件が上限で、超えると次のエラーメッセージ\n        - `Member must have length less than or equal to 25, Member must have length greater than or equal to 1`\n        - 上記ドキュメントにもちゃんと書いてあったね…\n        - 13万件 / 25件 で、5200回のリクエストを発行することになる\n- DynamoDBのテーブルの Billing mode をプロビジョニング済み(cdkでのデフォルト)にすると途中で失敗する\n    - `ProvisionedThroughputExceededException: The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API.`\n    - オンデマンドにすること\n- DynamoDBに空文字は登録できないので、null に置き換えること\n- 元データは Shift_JIS なので、UTF-8 に変更すること\n\n### misc\n- Node.js でのファイルシステムのアクセスで、Stream API を使ってみた\n    - 一度にメモリに読み込むより省メモリでよいかと思ったけど、結局読み込んでからユニークにする処理を入れたりで、あんまり意味がなかった…\n- 元々のモチベーションとして、決済機能を補助するものとして作っていて、今回はそのリファインしたもの\n    - amplify 内の Lambda Function で実装していて、src ディレクトリ内をごっそりデプロイする形だったので、Lambda から csv を直接読むような形にしていた\n        - csv は未ソートだし、ファイルサイズは大きいしで、HTTPリクエスト時にファイル内検索するのはレスポンスが遅くなりすぎる\n        - よって csv を事前にソートし、さらに郵便番号の頭2桁をキーにファイル分割するようにした\n        - 今考えるとちょっと雑だったかな…\n"},"title":"郵便番号検索APIを作った","slug":"postalcode_search","updatedAt":"2020-09-07T11:38:23.122Z"},"next":null}},"staticQueryHashes":["2390137347","3000541721"]}