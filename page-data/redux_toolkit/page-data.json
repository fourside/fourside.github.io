{"componentChunkName":"component---src-templates-blog-post-js","path":"/redux_toolkit","result":{"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"Redux Toolkitの感想","publishDate":"2020/09/25 04:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"これです Redux Toolkit | Redux Toolkit なぜ使おうと思ったか この辺を読んで「入れてもいいかな」から「やってみよう」になった(なるべくデフォルトで作って余計なものを入れたくない気持ちが邪魔をしていた) TypeScriptでReactをやるときは、小さいアプリでもRedux…","html":"<p>これです</p>\n<ul>\n<li><a href=\"https://redux-toolkit.js.org/\">Redux Toolkit | Redux Toolkit</a></li>\n</ul>\n<h3>なぜ使おうと思ったか</h3>\n<ul>\n<li>\n<p>この辺を読んで「入れてもいいかな」から「やってみよう」になった(なるべくデフォルトで作って余計なものを入れたくない気持ちが邪魔をしていた)</p>\n<ul>\n<li><a href=\"https://future-architect.github.io/articles/20200501/\">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話 | フューチャー技術ブログ</a></li>\n<li><a href=\"https://oukayuka.booth.pm/items/2367992\">りあクト！ TypeScriptで始めるつらくないReact開発 第3版【Ⅲ. React応用編】 - BOOTH</a></li>\n</ul>\n</li>\n<li>Redux + TypeScript だと確かにコード量が多くなり、自分のアプリケーションでもアクションの型定義で200行近く、アクション自体で300行超だったので見通しが悪かった</li>\n</ul>\n<h3>進め方</h3>\n<ul>\n<li>\n<p>Redux Toolkit に tutorial があるのでそれを読んで、実際にコードの置き換えをしていくだけ</p>\n<ul>\n<li><a href=\"https://redux-toolkit.js.org/tutorials/basic-tutorial\">Basic Tutorial | Redux Toolkit</a></li>\n<li>Basic => Intermediate => Advanced と段階があるけど、Advanced までやらないと非同期の処理が出てこないので最後までやる</li>\n</ul>\n</li>\n<li>redux toolkit をインストールすると、redux/redux-thunk が一緒に入ってくるので、最初から toolkit を使うのが便利かもしれない（ただし redux のバージョンがちょっとだけ古い）</li>\n</ul>\n<h3>結果</h3>\n<ul>\n<li>\n<p>実際にコード量が減った</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/fourside/filmemo/pull/29\">https://github.com/fourside/filmemo/pull/29</a></p>\n<ul>\n<li><code class=\"language-text\">+586 -790</code></li>\n</ul>\n</li>\n<li>slice (action + reducer なオブジェクト)を作ると、action creator を用意せずに済むのがうれしい</li>\n<li>結果 actions.tsとその型情報を全部消せた</li>\n</ul>\n</li>\n<li>\n<p>コードの見通しがよくなった</p>\n<ul>\n<li>reducer は reducer.ts に、 action は actions.ts に、というようにしていたところ、子の state 毎に features/xxx といったディレクトリを切って、そこに reducer/action を収めるようにした</li>\n<li>\n<p>tutorial の通りに進めると、ある程度自然と <a href=\"https://redux.js.org/style-guide/style-guide\">Redux の Style Guide</a> の通りになるので安心感がある</p>\n<ul>\n<li>この安心感のおかげで、redux に対するうっすら苦手意識みたいなのはなくなった</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使った API は <code class=\"language-text\">createSlice</code> <code class=\"language-text\">configureStore</code> くらいで、簡単に導入できる</p>\n<ul>\n<li>あとで <code class=\"language-text\">createSelector</code> も触っておく</li>\n</ul>\n</li>\n</ul>\n<h3>悩んだところ</h3>\n<h4>reducer の中で state を mutate してるかのようなコードを書くこと</h4>\n<ul>\n<li>\n<p><a href=\"https://redux-toolkit.js.org/tutorials/intermediate-tutorial#mutable-update-logic\">Intermediate Tutorial | Redux Toolkit</a></p>\n<ul>\n<li>redux toolkit の中で immer.js を使っており、実際には mutate しない動作になるとのこと</li>\n<li>通常の reducer では更新しない項目まで面倒みないといけないので、意図が分かりにくいコードになる</li>\n</ul>\n</li>\n<li>\n<p>知らないとびっくりされそうなポイントだなと思ったが…</p>\n<ul>\n<li>redux toolkit のAPIに渡すものの中でやることなので、一度知ってしまえば混同することはなさそう</li>\n</ul>\n</li>\n</ul>\n<h4>非同期なアクション(thunk action)の戻り値が欲しいときがある</h4>\n<ul>\n<li>dispatch(someAsyncAction()) は promise を返すわけではなし、reduxの管理するstateから実行結果を得るしかない</li>\n<li>containerをかませればできるのだけど、できれば redux の hooks を使いたい</li>\n<li>以下、個別のケースを2つ</li>\n</ul>\n<h5>認証のリダイレクト後に未認証、認証のチェックをしたい</h5>\n<ul>\n<li>未認証ならサインイン画面に飛ばすとかやりたいんだけど、初期値の状態を経て認証状態になるので、単純に任意の値がfalsyかどうかで判断できない</li>\n<li><code class=\"language-text\">authed | unauthed | unknown</code> みたいな3値で判定するようにした(ここでの unknown は、SQL での null は未定を意味するみたいな発想)</li>\n</ul>\n<h5>form送信して成功/失敗のチェック</h5>\n<ul>\n<li>成功したら画面遷移などさせたいし、失敗したら留まって欲しい</li>\n<li>\n<p>結果を redux で管理する？</p>\n<ul>\n<li>だとして、結果をクリアするタイミングとかエンバグしそうな箇所を作りたくない</li>\n</ul>\n</li>\n<li>\n<p>とりあえず、成功時の処理をコールバックとして thunk action に渡すようにした</p>\n<ul>\n<li>これはあんまりよくないやり方だと思う…ので、thunk action を使わず、カスタムフックを作ってそこでプレーンなアクションを dispatch するのがきれいなように思える</li>\n</ul>\n</li>\n</ul>"}}}},"pageContext":{"slug":"redux_toolkit","previous":{"body":{"body":"### 作ったもの\n- [fourside/vanila_scroollspy](https://github.com/fourside/vanila_scroollspy)\n![intersection observable api](//images.ctfassets.net/2zg7j2cy03uu/6Sdv5J3zHP2mead2qgs0q7/081957eaf3b8b3d08f89c343910ece57/intersection_observable_api.gif)\n\n### モチベーション\n- Intersection Observer API を使う処理の素振り\n- サイドメニューの expand / collapse を実装してみた\n- Infinity Scroll の場合は以前試したことがある\n    - [filmemo/useIntersect.ts](https://github.com/fourside/filmemo/blob/develop/src/hooks/useIntersect.ts)\n\n### 参照\n- [Intersection Observer API - Web API | MDN](https://developer.mozilla.org/ja/docs/Web/API/Intersection_Observer_API)\n- [JSでのスクロール連動エフェクトにはIntersection Observerが便利 - ICS MEDIA](https://ics.media/entry/190902/)\n    - オプションについての説明が分かりやすい\n    - やりたかったこと全部ここにあるのよね…\n\n### 素振りについて\n- こういった素振りをする行為は大事だなと思っていて、ちょっと前にやった案件でモーダルを出したくなったとき、以前バニラでモーダル実装したことがあったので、さっと作ることができた\n- なんとなくAPIを知っているくらいの状態だと、いざ必要になったときに調査のフェーズが挟まるし、見積もりも余計にバッファを積んでしまう\n- 一回自分で作っておくと、これくらいの実装で可能だというのが分かるし、最低でも記憶のインデックスになる\n    - 他のライブラリに依存しないで作れると他の環境でも応用しやすい\n- 今回のは CSS アニメーションに手こずったけれどもね…\n"},"title":"Intersection Observer API でサイドメニューの状態変化","slug":"intersection_observer_api","updatedAt":"2020-09-09T09:18:42.352Z"},"next":null}},"staticQueryHashes":["2390137347","3000541721"]}