{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/redux_toolkit",
    "result": {"data":{"site":{"siteMetadata":{"title":"fourside.github.io"}},"contentfulBlogPost":{"title":"Redux Toolkitの感想","publishDate":"2020/09/25 04:00:00 +00:00","body":{"childMarkdownRemark":{"excerpt":"これです Redux Toolkit | Redux Toolkit なぜ使おうと思ったか この辺を読んで「入れてもいいかな」から「やってみよう」になった(なるべくデフォルトで作って余計なものを入れたくない気持ちが邪魔をしていた) TypeScriptでReactをやるときは、小さいアプリでもRedux…","html":"<p>これです</p>\n<ul>\n<li><a href=\"https://redux-toolkit.js.org/\">Redux Toolkit | Redux Toolkit</a></li>\n</ul>\n<h3>なぜ使おうと思ったか</h3>\n<ul>\n<li>この辺を読んで「入れてもいいかな」から「やってみよう」になった(なるべくデフォルトで作って余計なものを入れたくない気持ちが邪魔をしていた)\n<ul>\n<li><a href=\"https://future-architect.github.io/articles/20200501/\">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話 | フューチャー技術ブログ</a></li>\n<li><a href=\"https://oukayuka.booth.pm/items/2367992\">りあクト！ TypeScriptで始めるつらくないReact開発 第3版【Ⅲ. React応用編】 - BOOTH</a></li>\n</ul>\n</li>\n<li>Redux + TypeScript だと確かにコード量が多くなり、自分のアプリケーションでもアクションの型定義で200行近く、アクション自体で300行超だったので見通しが悪かった</li>\n</ul>\n<h3>進め方</h3>\n<ul>\n<li>Redux Toolkit に tutorial があるのでそれを読んで、実際にコードの置き換えをしていくだけ\n<ul>\n<li><a href=\"https://redux-toolkit.js.org/tutorials/basic-tutorial\">Basic Tutorial | Redux Toolkit</a></li>\n<li>Basic => Intermediate => Advanced と段階があるけど、Advanced までやらないと非同期の処理が出てこないので最後までやる</li>\n</ul>\n</li>\n<li>redux toolkit をインストールすると、redux/redux-thunk が一緒に入ってくるので、最初から toolkit を使うのが便利かもしれない（ただし redux のバージョンがちょっとだけ古い）</li>\n</ul>\n<h3>結果</h3>\n<ul>\n<li>実際にコード量が減った\n<ul>\n<li><a href=\"https://github.com/fourside/filmemo/pull/29\">https://github.com/fourside/filmemo/pull/29</a>\n<ul>\n<li><code class=\"language-text\">+586 -790</code></li>\n</ul>\n</li>\n<li>slice (action + reducer なオブジェクト)を作ると、action creator を用意せずに済むのがうれしい</li>\n<li>結果 actions.tsとその型情報を全部消せた</li>\n</ul>\n</li>\n<li>コードの見通しがよくなった\n<ul>\n<li>reducer は reducer.ts に、 action は actions.ts に、というようにしていたところ、子の state 毎に features/xxx といったディレクトリを切って、そこに reducer/action を収めるようにした</li>\n<li>tutorial の通りに進めると、ある程度自然と <a href=\"https://redux.js.org/style-guide/style-guide\">Redux の Style Guide</a> の通りになるので安心感がある\n<ul>\n<li>この安心感のおかげで、redux に対するうっすら苦手意識みたいなのはなくなった</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使った API は <code class=\"language-text\">createSlice</code> <code class=\"language-text\">configureStore</code> くらいで、簡単に導入できる\n<ul>\n<li>あとで <code class=\"language-text\">createSelector</code> も触っておく</li>\n</ul>\n</li>\n</ul>\n<h3>悩んだところ</h3>\n<h4>reducer の中で state を mutate してるかのようなコードを書くこと</h4>\n<ul>\n<li><a href=\"https://redux-toolkit.js.org/tutorials/intermediate-tutorial#mutable-update-logic\">Intermediate Tutorial | Redux Toolkit</a>\n<ul>\n<li>redux toolkit の中で immer.js を使っており、実際には mutate しない動作になるとのこと</li>\n<li>通常の reducer では更新しない項目まで面倒みないといけないので、意図が分かりにくいコードになる</li>\n</ul>\n</li>\n<li>知らないとびっくりされそうなポイントだなと思ったが…\n<ul>\n<li>redux toolkit のAPIに渡すものの中でやることなので、一度知ってしまえば混同することはなさそう</li>\n</ul>\n</li>\n</ul>\n<h4>非同期なアクション(thunk action)の戻り値が欲しいときがある</h4>\n<ul>\n<li>dispatch(someAsyncAction()) は promise を返すわけではなし、reduxの管理するstateから実行結果を得るしかない</li>\n<li>containerをかませればできるのだけど、できれば redux の hooks を使いたい</li>\n<li>以下、個別のケースを2つ</li>\n</ul>\n<h5>認証のリダイレクト後に未認証、認証のチェックをしたい</h5>\n<ul>\n<li>未認証ならサインイン画面に飛ばすとかやりたいんだけど、初期値の状態を経て認証状態になるので、単純に任意の値がfalsyかどうかで判断できない</li>\n<li><code class=\"language-text\">authed | unauthed | unknown</code> みたいな3値で判定するようにした(ここでの unknown は、SQL での null は未定を意味するみたいな発想)</li>\n</ul>\n<h5>form送信して成功/失敗のチェック</h5>\n<ul>\n<li>成功したら画面遷移などさせたいし、失敗したら留まって欲しい</li>\n<li>結果を redux で管理する？\n<ul>\n<li>だとして、結果をクリアするタイミングとかエンバグしそうな箇所を作りたくない</li>\n</ul>\n</li>\n<li>とりあえず、成功時の処理をコールバックとして thunk action に渡すようにした\n<ul>\n<li>これはあんまりよくないやり方だと思う…ので、thunk action を使わず、カスタムフックを作ってそこでプレーンなアクションを dispatch するのがきれいなように思える</li>\n</ul>\n</li>\n</ul>\n<h3>最後に</h3>\n<p>bundle サイズどれだけ変わったか。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">File sizes after gzip:\n\n  <span class=\"token number\">241.45</span> KB <span class=\"token punctuation\">(</span>+6.08 KB<span class=\"token punctuation\">)</span>  build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">4</span>.d246d372.chunk.js\n  <span class=\"token number\">54.38</span> KB <span class=\"token punctuation\">(</span>+11 B<span class=\"token punctuation\">)</span>      build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">5</span>.c7a89df4.chunk.js\n  <span class=\"token number\">9.4</span> KB <span class=\"token punctuation\">(</span>-3 B<span class=\"token punctuation\">)</span>         build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">0</span>.cba94f39.chunk.js\n  <span class=\"token number\">6.04</span> KB <span class=\"token punctuation\">(</span>+164 B<span class=\"token punctuation\">)</span>      build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>main.b9447786.chunk.js\n  <span class=\"token number\">3.07</span> KB <span class=\"token punctuation\">(</span>+5 B<span class=\"token punctuation\">)</span>        build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">6</span>.b4b32cf6.chunk.js\n  <span class=\"token number\">3.05</span> KB <span class=\"token punctuation\">(</span>-19 B<span class=\"token punctuation\">)</span>       build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">8</span>.f62b749c.chunk.js\n  <span class=\"token number\">2.35</span> KB <span class=\"token punctuation\">(</span>+6 B<span class=\"token punctuation\">)</span>        build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">7</span>.be5a358d.chunk.js\n  <span class=\"token number\">1.23</span> KB <span class=\"token punctuation\">(</span>+1 B<span class=\"token punctuation\">)</span>        build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span>runtime-main.681aaec9.js\n  <span class=\"token number\">731</span> B <span class=\"token punctuation\">(</span>-1 B<span class=\"token punctuation\">)</span>          build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">1</span>.816b4f1d.chunk.js\n  <span class=\"token number\">443</span> B <span class=\"token punctuation\">(</span>+3 B<span class=\"token punctuation\">)</span>          build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>js<span class=\"token punctuation\">\\</span><span class=\"token number\">9</span>.1e585942.chunk.js\n  <span class=\"token number\">304</span> B                 build<span class=\"token punctuation\">\\</span>static<span class=\"token punctuation\">\\</span>css<span class=\"token punctuation\">\\</span>main.ed9b3d4b.chunk.css</code></pre></div>\n<p>おおよそ6KBの増加。これを許せるかどうかはプロジェクトに依るだろうな。とはいえ保守性に関わるのでできれば使いたいなと思います。</p>"}}}},"pageContext":{"slug":"redux_toolkit","previous":{"body":{"body":"### 作ったもの\n- [fourside/vanila_scroollspy](https://github.com/fourside/vanila_scroollspy)\n![intersection observable api](//images.ctfassets.net/2zg7j2cy03uu/6Sdv5J3zHP2mead2qgs0q7/081957eaf3b8b3d08f89c343910ece57/intersection_observable_api.gif)\n\n### モチベーション\n- Intersection Observer API を使う処理の素振り\n- サイドメニューの expand / collapse を実装してみた\n- Infinity Scroll の場合は以前試したことがある\n    - [filmemo/useIntersect.ts](https://github.com/fourside/filmemo/blob/develop/src/hooks/useIntersect.ts)\n\n### 参照\n- [Intersection Observer API - Web API | MDN](https://developer.mozilla.org/ja/docs/Web/API/Intersection_Observer_API)\n- [JSでのスクロール連動エフェクトにはIntersection Observerが便利 - ICS MEDIA](https://ics.media/entry/190902/)\n    - オプションについての説明が分かりやすい\n    - やりたかったこと全部ここにあるのよね…\n\n### 素振りについて\n- こういった素振りをする行為は大事だなと思っていて、ちょっと前にやった案件でモーダルを出したくなったとき、以前バニラでモーダル実装したことがあったので、さっと作ることができた\n- なんとなくAPIを知っているくらいの状態だと、いざ必要になったときに調査のフェーズが挟まるし、見積もりも余計にバッファを積んでしまう\n- 一回自分で作っておくと、これくらいの実装で可能だというのが分かるし、最低でも記憶のインデックスになる\n    - 他のライブラリに依存しないで作れると他の環境でも応用しやすい\n- 今回のは CSS アニメーションに手こずったけれどもね…\n"},"title":"Intersection Observer API でサイドメニューの状態変化","slug":"intersection_observer_api","updatedAt":"2020-09-09T09:18:42.352Z"},"next":{"body":{"body":"- [fourside/sqlgen-cli](https://github.com/fourside/sqlgen-cli)\n\n### なにをするやつ\n- JSON から INSERT 文や DELETE 文を出力します\n\n### なぜ作ったのか\n- 元ネタは過去にやった案件で、簡単に書いたテストのヘルパーの焼き直し\n    - テスト用のデータの作成\n    - たまたま MySQL だったので、bulk insert の形にしている\n    - cliの形式を取ってはいるけど、完全に自分用であまり柔軟には作っていない\n- 難しいことは一切していない\n    - 外部参照制約での値の決定とか…\n    - DELETE 文も参照関係を考慮していないので、INSERT 文を生成してる順番を逆にしてるだけ\n- TypeScriptファイルにJSON定義しているので、デフォルト値や日時の生成など動的に値を決定できるのが便利ポイント\n- わざわざ書き直したのは、触ったことのないライブラリを使ってみたいというモチベーションもある\n    - いずれもちょろっとしか触れてないので、そんなに何か言えることはない…\n\n#### [dayjs](https://github.com/iamkun/dayjs)\n- 軽量、Dateのprototypeも汚染しない、npm trendsみても結構流行ってる\n- utcが素のままで使えなかったのは少し驚いたけども、デフォルトで入ってるプラグインを通せば大丈夫\n- 型定義も元から入ってるの安心感ある\n\n#### [yargs](https://github.com/yargs/yargs)\n- cli parserのcommanderは以前使ったことがあったので、別のやつ\n- 悪くない、次どっち使うかは迷う\n\n#### [ava](https://github.com/avajs/ava)\n- 年末のsurveyとかで見かけるテストライブラリ\n- jestだとリッチすぎるかなーというときmochaを選ぶけど、これでもよさそうな感じはする\n- TypeScriptで使うとき [多少の設定](https://github.com/avajs/ava/blob/master/docs/recipes/typescript.md) が必要だった\n\n以上です。\n"},"title":"JSON から SQL を生成しました","slug":"json_to_sql","updatedAt":"2020-09-28T13:57:12.955Z"}}},
    "staticQueryHashes": ["1784162573","882115108"]}