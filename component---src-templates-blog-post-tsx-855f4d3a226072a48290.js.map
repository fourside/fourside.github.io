{"version":3,"file":"component---src-templates-blog-post-tsx-855f4d3a226072a48290.js","mappings":"6JA0DA,IArDiB,WAAO,IAAD,MACfA,GAAOC,EAAAA,EAAAA,gBAAc,aAc3B,QAAgCC,KAA5B,UAAAF,EAAKG,YAAL,eAAWC,cACb,OAAO,oEAET,QAA2BF,KAAvB,UAAAF,EAAKK,gBAAL,eAAeC,KACjB,OAAO,+DAGT,IAAMC,GAAa,UAAAP,EAAKG,KAAKC,aAAaI,cAAvB,eAA+BC,OAAQ,GAE1D,OACE,uBACEC,MAAO,CACLC,QAAQ,OACRC,WAAW,SACXC,cAAcC,EAAAA,EAAAA,IAAO,OAGvB,uBACEC,IAAKf,EAAKK,SAASC,IACnBU,IAAKT,EACLG,MAAO,CACLO,aAAaH,EAAAA,EAAAA,IAAO,IACpBD,aAAc,EACdK,SAAU,GACVC,aAAa,UAGjB,qBACET,MAAO,CACLU,OAAO,MAFX,cAKa,8BAASb,O,4FC6C5B,UArEiE,SAAC,GAAqC,IAAnCP,EAAkC,EAAlCA,KAAMqB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC/EC,EAAOvB,EAAKwB,mBACZC,EAAYzB,EAAKG,KAAKC,aAAasB,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,gBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,gBAAC,IAAD,CAAKC,MAAOH,EAAKG,MAAOG,YAAaN,EAAKO,KAAKC,oBAAoBC,UACnE,+BACE,8BACE,sBACEtB,MAAO,CACLuB,WAAWnB,EAAAA,EAAAA,IAAO,GAClBD,aAAc,IAGfU,EAAKG,OAER,qBACEhB,MAAK,kBACAwB,EAAAA,EAAAA,KAAM,IADN,CAEHvB,QAAQ,QACRE,cAAcC,EAAAA,EAAAA,IAAO,MAGtBS,EAAKY,cAGV,2BAASC,wBAAyB,CAAEC,OAAQd,EAAKO,KAAKC,oBAAoBO,QAC1E,sBACE5B,MAAO,CACLG,cAAcC,EAAAA,EAAAA,IAAO,MAGzB,8BACE,gBAAC,IAAD,QAIJ,2BACE,sBACEJ,MAAO,CACLC,QAAQ,OACR4B,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAgB,KAAD,CAAMC,GAAE,IAAMjB,EAASkB,KAAQC,IAAI,QAAnC,KACKnB,EAASD,QAIlB,0BACGE,GACC,gBAAC,EAAAe,KAAD,CAAMC,GAAE,IAAMhB,EAAKiB,KAAQC,IAAI,QAC5BlB,EAAKF,MADR","sources":["webpack://fourside.github.io/./src/components/bio.tsx","webpack://fourside.github.io/./src/templates/blog-post.tsx"],"sourcesContent":["import React, { VFC } from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nimport { rhythm } from \"../utils/typography\";\n\nconst Bio: VFC = () => {\n  const data = useStaticQuery<GatsbyTypes.BioQuery>(graphql`\n    query Bio {\n      gravatar {\n        url\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n          }\n        }\n      }\n    }\n  `);\n  if (data.site?.siteMetadata === undefined) {\n    return <div>Error: site.siteMetadata is undefined</div>;\n  }\n  if (data.gravatar?.url === undefined) {\n    return <div>Error: gravatar.url is undefined</div>;\n  }\n\n  const authorName = data.site.siteMetadata.author?.name || \"\";\n\n  return (\n    <div\n      style={{\n        display: `flex`,\n        alignItems: `center`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <img\n        src={data.gravatar.url}\n        alt={authorName}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n      />\n      <p\n        style={{\n          margin: `0`,\n        }}\n      >\n        Written by <strong>{authorName}</strong>\n      </p>\n    </div>\n  );\n};\n\nexport default Bio;\n","import React, { VFC } from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport type { PageProps } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport { rhythm, scale } from \"../utils/typography\";\nimport { BlogPageContext } from \"../../gatsby-node\";\n\ninterface Props {\n  contentfulBlogPost: {\n    title: string;\n    publishDate: string;\n    body: {\n      childMarkdownRemark: {\n        excerpt: string;\n        html: string;\n      };\n    };\n  };\n  site: {\n    siteMetadata: {\n      title: string;\n    };\n  };\n}\n\nconst BlogPostTemplate: VFC<PageProps<Props, BlogPageContext>> = ({ data, pageContext, location }) => {\n  const post = data.contentfulBlogPost;\n  const siteTitle = data.site.siteMetadata.title;\n  const { previous, next } = pageContext;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={post.title} description={post.body.childMarkdownRemark.excerpt} />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n            }}\n          >\n            {post.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.publishDate}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.body.childMarkdownRemark.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={`/${previous.slug}`} rel=\"prev\">\n                ← {previous.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={`/${next.slug}`} rel=\"next\">\n                {next.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    contentfulBlogPost(slug: { eq: $slug }) {\n      title\n      publishDate(formatString: \"YYYY/MM/DD HH:mm:ss Z\")\n      body {\n        childMarkdownRemark {\n          excerpt(pruneLength: 160)\n          html\n        }\n      }\n    }\n  }\n`;\n"],"names":["data","useStaticQuery","undefined","site","siteMetadata","gravatar","url","authorName","author","name","style","display","alignItems","marginBottom","rhythm","src","alt","marginRight","minWidth","borderRadius","margin","pageContext","location","post","contentfulBlogPost","siteTitle","title","previous","next","description","body","childMarkdownRemark","excerpt","marginTop","scale","publishDate","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","Link","to","slug","rel"],"sourceRoot":""}