<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[fourside.github.io]]></title><description><![CDATA[programmer's note]]></description><link>https://fourside.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 02 Sep 2020 00:08:37 GMT</lastBuildDate><item><title><![CDATA[作ったものの説明]]></title><description><![CDATA[今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。 就職活動でGitHubのURLを乗せても、README…]]></description><link>https://fourside.github.iodesc_repo</link><guid isPermaLink="false">https://fourside.github.iodesc_repo</guid><pubDate>Mon, 31 Aug 2020 15:00:00 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;今まで作ったものの説明をしてこなかったので簡単に説明しようと思います。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就職活動でGitHubのURLを乗せても、READMEに書くのは簡単な説明と使い方くらいなので分かりにくいと思うので…。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主に「なぜ作るのか」、「何を学んだか」&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本的には、自分の問題を解決するため&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;次に、興味のあるライブラリなどを試すため&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/ie-ignore-slide&quot;&gt;ie-ignore-slide&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スライドのライブラリ&lt;/li&gt;
&lt;li&gt;polyfill使えばいいのだけど完全に個人用なのでIEを無視することに&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;パワーポイントを使いたくなさすぎて自作した&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WebComponents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当時ようやくFirefoxで使えるようになったのと、技術書典でWebComponentsの本を買ったことが理由&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;地味にプログレスバーを用意してLTに便利なようにしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CSSアニメーションをもっとスライドらしくしたい&lt;/li&gt;
&lt;li&gt;コンポーネントにあてるCSSをきれいに書けずもどかしい&lt;/li&gt;
&lt;li&gt;npm publishしたほうが使いやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/podcast&quot;&gt;podcast&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;録音したものをpodcast形式で配信するアプリケーション&lt;/li&gt;
&lt;li&gt;だいぶ前に作っていて今でもずっと使い続けており、最近コンテナ化した&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ラジオが好きなので個人用のアーカイブ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;もともと素朴に作っていたものをコンテナ化した&lt;/li&gt;
&lt;li&gt;そうすることでミドルウェアの設定などもgitで管理できるようになり、ポータビリティが得られた&lt;/li&gt;
&lt;li&gt;logging driverでログ収集することでfluentdクライアント不要になるところがよい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;docker-compose.ymlを開発用と本番用に分けたところ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本番用にはfluentd/mongodbを足して、ログの集積をしている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;集積したログを閲覧・検索したり、監視したりする仕組みを用意したい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/videoserver&quot;&gt;videoserver&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;youtubeから動画をダウンロードしてpodcastとして配信する&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;テック系の動画を通勤中に見れるように&lt;/li&gt;
&lt;li&gt;podcastとして管理すると未読管理が楽になる&lt;/li&gt;
&lt;li&gt;結局はmusic videoがメインになってしまった&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;バックエンドはgolang&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;goroutine, channelの基本的な使い方&lt;/li&gt;
&lt;li&gt;パッケージ管理はいろいろ変遷があったようだがdepを使うようにした&lt;/li&gt;
&lt;li&gt;ビルドにはmakeを使い、静的解析をするようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フロントエンドはreact&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;途中でhooksに書き換えてみたり、reduxに入門したりした&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ビルドツールはparcelにした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勝手に必要なものが裏で揃えられるので楽だけど、たまにうまく行かなくなるときがある…&lt;/li&gt;
&lt;li&gt;小さく始めるときの最初のビルドツールとして最適だと思った&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;web workerも使ってみた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;polling処理でダウンロードの進捗表示をするところ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バックエンドはgoroutineからyoutube-dlの標準出力を抜き取ってレスポンスを返す&lt;/li&gt;
&lt;li&gt;フロントエンドはWebWorkerでサーバリクエストを送り、メインスレッドにサーバレスポンスの一部を返す&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;削除APIができていない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBを使ってない（ファイルシステムを直接見てレスポンスを作っている）ので、一意にしにくい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reduxを使い始めたが、きちんと理解した感じがしない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ミドルウェアまで入れたくない気持ちがあるが実際はどうなのか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字幕情報をダウンロードできるのだが、動画に埋め込むとき字幕表示がきれいではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/meigaza&quot;&gt;meigaza&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スクレイピング結果をslackやスマホに通知してくれるスクリプト&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;映画をよく見るようになった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;東京にある名画座のスケジュールを簡単に知りたくなった&lt;/li&gt;
&lt;li&gt;気づいたら前売り券を買える期間が過ぎていた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;puppeteerによるスクレイピング&lt;/li&gt;
&lt;li&gt;aws lambdaのカスタムランタイム&lt;/li&gt;
&lt;li&gt;iftttでの通知&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;最初は常駐型のボットを実装しようと思ったが、スケジュールでキックされるAWS Lambdaで実現できたこと&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cliでデプロイできるようにしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/mock-server&quot;&gt;mock-server&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;リクエストパスとサーバローカルのファイルをマッピングするサーバ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;フロントエンド(SPA)の開発でモックサーバが欲しくなった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特にページャの実装で、特定のクエリ文字列を含むURLのとき、それっぽいJSONを返してほしい&lt;/li&gt;
&lt;li&gt;nginxのlocationはクエリまで含めて判定してくれない&lt;/li&gt;
&lt;li&gt;軽く探しても欲しい物はなさそうだったので、自分で書くことにした&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;node.jsでのサーバの書き方&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ライブラリを使わないようにnodeのapiだけで作ってみた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使うときnpm installする必要がなくなって、シンプルなものになった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;普通に作ると起動時だけ設定ファイルを読むように作るが、フロントエンドの開発をしやすいようにリクエストの度に設定ファイルを読むようにした&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;typescript化&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;テストがない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ルーティング定義のファイルを実行時引数で渡せるようにしないとな…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公開ディレクトリに置かれたファイル（webpackなどのビルド成果物）の変更検知して、ブラウザをリロードしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/modal_sample&quot;&gt;modal_sample&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;よくあるモーダル画面のサンプル実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;仕事でモーダル画面が必要になったがライブラリを使わず実装したかった&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;よくあるモーダルの実装方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;世の中のモーダルはどう実装されているのか、いろいろ調べてみるとだいたい同じだったのでそのように実装した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cssアニメーションの基礎&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ライブラリを使わずvanillaに作ること&lt;/li&gt;
&lt;li&gt;WindowsのインターネットオプションによってIEではlocalStorageが無効にできるので、Nullオブジェクトを用意した&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;特になし&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/fourside/elecron&quot;&gt;elecron&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;指定したスケジュールで任意のURLを開く常駐アプリ&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;背景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;物理的な勤怠打刻からWebの打刻に移行した際、打刻を忘れてしまうという話を聞いた&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出退勤の時間になったらブラウザで打刻用のサイトを開くアプリを作ろうと思った&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;学んだ技術&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;electron&lt;/li&gt;
&lt;li&gt;vue&lt;/li&gt;
&lt;li&gt;webpack&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;工夫&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;windows向けに作ったのでappveyorを使ってみた&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;改善点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cronの書式が分かりにくい（がパターンの表現力は高いので、完全に置き換えるものは思いつかず…）&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;コンポーネントが大きいので分割したい&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1個のFormを分割するのは冗長な部分が増えそうで躊躇してしまう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Java Day Tokyo 2018]]></title><description><![CDATA[メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracle…]]></description><link>https://fourside.github.iojavadaytokyo2018</link><guid isPermaLink="false">https://fourside.github.iojavadaytokyo2018</guid><pubDate>Mon, 31 Aug 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;メールをプリントアウトして名刺と合わせて受付をするんだけど、メールに書いてある名前がメールアドレスのアカウントになっていて、名刺に載っている情報と全く一致せず、受付の人を困惑させてしまった。oracleアカウント、個人のやつだしね…。&lt;/p&gt;
&lt;p&gt;メモと感想です(後でスライドが公開されるだろうけど)。&lt;/p&gt;
&lt;h2&gt;key note&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;リリースモデルについて、わかりやすいけどOpenJDKはLTS出ないのね&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jdk11が今年9月に出る(予定通り)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JEPsはこれからも追加される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mission controll と flight recorder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eclipse pluginで開けて便利&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下部のペインにスタックトレースからコードにジャンプできる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;パフォーマンスの問題3例での見え方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LinkedListのループ内のget&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;シングルトンインスタンス(ロガーとか)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これどういうシチュエーションの問題だっけ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ループ内でオートボクシングが発生しててGC走りまくってる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;赤いアイコン出ないので問題なさそうに見えるので注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どう気づけばいいんだ？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;リリース未定だったりする新しい機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Valhalla&lt;/li&gt;
&lt;li&gt;Portola&lt;/li&gt;
&lt;li&gt;Panama&lt;/li&gt;
&lt;li&gt;Amber&lt;/li&gt;
&lt;li&gt;Loom&lt;/li&gt;
&lt;li&gt;ZGC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fn&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サーバレス&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cli&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ボイラープレートを吐いたり&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ローカルサーバ起動できたり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;個人的にこれがすごく良いと思う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アプリをデプロイできたり&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;javaで単一の処理で書けてしまうが、裏では複数のコンテナが実行されてるやつのデモ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flickrから車の写真を集めてきて最終的にslackにポストしまくる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Java in a Wolrd of Containers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;翻訳レシーバの付け方がわからなくて英語で聞いてみたけどやっぱり翻訳必要だな…&lt;/li&gt;
&lt;li&gt;jlink, jdeps&lt;/li&gt;
&lt;li&gt;musl libc&lt;/li&gt;
&lt;li&gt;portola&lt;/li&gt;
&lt;li&gt;AppCDSでコンテナ間のクラスデータのシェア&lt;/li&gt;
&lt;li&gt;Dockerの設定を考慮するJava起動オプションのサポート&lt;/li&gt;
&lt;li&gt;適切なbase imageを使うとサイズの軽量化できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Project Valhalla&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Value Types&lt;/li&gt;
&lt;li&gt;Generics Specialization&lt;/li&gt;
&lt;li&gt;Var Handles&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名前の由来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Value Typesと似てるっしょ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;シンタックス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例えばこんなの&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;value class Hoge { }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;クラスのように書けてプリミティブのように振る舞う&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ヘッダがない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;オブジェクトのメタ情報&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何のインスタンスなのかとか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;モニタがない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロックの情報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;キャッシュミスしない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これはどういう理屈だっけ…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“What Would Int Do”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ジェネリクス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どう扱えるの？&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;List&amp;lt;int&amp;gt; list = ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IntStreamとかToIntFunctionとかなくせる&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;クラスの継承ツリー&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;-- any(仮)
 |- primitive(int/long/...)
 |- Object
      | - ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;このany(仮)をバイトコードでどう表現するのとか悩んでるらしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VarHandles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unsafeで扱えたメモリ操作ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;余談&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メモリバリア&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;volatile&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この辺理解できてない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Curing you Domain Model Anemia…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DDDに触れてからのコードスメル&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フォーカスする話題の粒度が真逆というか振り幅がでかいというか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Martin Fowlerの”When to make a type”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;疑問に思ったらクラスを作れ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ライブコーディング！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;githubやyoutubeにサンプルあるから探してくれ&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dddするときのモデルに特定のフレームワークを使っても(よい|ダメ)派がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使ってもいい派&lt;/li&gt;
&lt;li&gt;今回はjpaのエンティティをモデルとして扱う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex. 「primitiveなフィールド、マイナスにしたくない」&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;オブジェクトにしちゃう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;イミュータブルにする&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;コンストラクタはprivateにして、static factoryを作る&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;その中で引数の検査をする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getterで参照を返すときはコピーを返そう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hashcode/eqaulsの実装忘れずに&lt;/li&gt;
&lt;li&gt;toStringはデバッグ情報を出すようにすべき&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formattable知ってる？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビジネス要件での出力&lt;/li&gt;
&lt;li&gt;国際化するときも使える、詳しくはjavadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ComparisonChain使ってたけどよく知らない、何がうれしいか調べておく&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enumコンストラクタはjava8での書き方があるらしい&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;今回は時間の都合でjava7のやり方（おなじみやつ）&lt;/li&gt;
&lt;li&gt;コードサンプル調べておく&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JPAでのtips&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;イミュータブルなエンティティにするには&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンストラクタはprotected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;フィールドにオブジェクトを持つ場合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;それがバリューオブジェクトだったら@ElementCollection&lt;/li&gt;
&lt;li&gt;エンティティだったらいつもの@OneToManyなど&lt;/li&gt;
&lt;li&gt;件数が数件程度ならバリューオブジェクト、100件とかになったらエンティティにしたほうがよい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Get ready for a cloud native…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;k8s + istio でコンテナのメトリクスを簡単に取得できる話&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k8sで環境ごとのurlを用意しなくてよくなる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリ側で使うのは論理的なURL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サイドカーコンテナ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mainコンテナとproxyコンテナのセット&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;istio使うとgrafanaでモニタリングのダッシュボードが表示される&lt;/li&gt;
&lt;li&gt;eclipse micro profile&lt;/li&gt;
&lt;li&gt;server.xml&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;リクエストに関する設定(ルール)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コネクションタイムアウト&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;レスポンスのディレイ設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テストしやすくてよい！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;リクエストヘッダにtrace-idみたいなのがついている&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;これを追うとどのコンテナを通っていったか追跡できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サーキットブレーカーという単語が出てきたけど、それが何だっていうところ聞き逃した…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;言葉の意味は「一時的に止める措置」？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;service meshes: key takeaways
- transparently add technical cross-cutting concerns.
- think &amp;quot;AOP for applications&amp;quot;
- routing, load-balancing, resiliency, telemetry, auth
- integrates well with Java enterprise approach:
    - business logic is responsibility of the applications
    - technical concerns are part of the envioronment&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;全体的に&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloudというかコンテナ周りというかにフォーカスされているのを確認した。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面白かったのは新しい機能だったり普段の暮らしに近いコーディング周りだったり。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDDは座学な印象あるけど実地で見せてもらうと楽しい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[自己紹介ブログ]]></title><description><![CDATA[職務経歴書に自己PR…]]></description><link>https://fourside.github.ioabout-me</link><guid isPermaLink="false">https://fourside.github.ioabout-me</guid><pubDate>Mon, 31 Aug 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;職務経歴書に自己PRがないと指摘され、自分のよわみはすぐ書けるがつよみは書きにくい…と悩んだ末、自己紹介を書くことで代わりになるのでは、さらにブログの記事だったらより書きやすいはず、と思いました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;プログラマーになろうと思ったきっかけ&lt;/li&gt;
&lt;li&gt;好ましいと思っていること、大事にしたいこと&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この辺が書ければ自己PRとしてもよいのでは。&lt;/p&gt;
&lt;h3&gt;プログラマーになろうと思ったきっかけ&lt;/h3&gt;
&lt;p&gt;当時の僕は特に目指すものもなく派遣スタッフとして働いており、エクセルで住所データを加工する仕事をしていました。ショートカットキーを覚えてしまえばすぐ終わる仕事であったので、持て余した時間でVBAを覚えました。ここで初めてプログラミングの基礎を習得したのですが、新しいことを覚える楽しさ以外にも、高速化テクニックを試したり、他の言語ではどういう書き方をするのか調べたり（VBAは明らかに機能が少なく不自由だった）、学んだことがすぐ活かせるというのも面白く、なにより自分の書いたものが動くことは楽しい、原始的な喜びがあると気づきました。&lt;/p&gt;
&lt;p&gt;その職場では一応意味のあるものを作ることができて、それはエクセルブックから外字を検出するといったものでした（最終的に印字することが目的なので、事前に検出できることには意味がありました）。そのとき参考にしたのが「詳解正規表現」で（俗にいうところのフクロウ本）、初心者が読むにはちょっと難しかったんですが、体系的に知識を得るには（ちょっと背伸びしてでも）技術書というものを読むのが早いということを知りました。そんな感じで、こんな楽しいことが仕事になるんだったらいいなと次第に考えるようになりました。&lt;/p&gt;
&lt;p&gt;その頃、以下の記事を読んだのもその気になった原因のひとつと思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/COLUMN/20090324/327115/?rt=nocnt&quot;&gt;プログラマになりたいあなたへの手紙 - プログラマになりたいあなたへ：ITpro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pha.hateblo.jp/entry/20080429/1209464163&quot;&gt;知らないと損する職業訓練 - phaの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その後、職業訓練を経て、未経験OKな派遣業を営むSIerに拾ってもらうことができました。&lt;/p&gt;
&lt;h3&gt;好ましいと思っていること、大事にしていること&lt;/h3&gt;
&lt;p&gt;プログラマーとして働いていて気にしていることです。当たり前といえば当たり前のことではある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;テキストを好んで使うこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ドキュメントもインフラも何でもテキストで表現したらdiffも取れるしgitで管理できていいね、くらいの意味&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wordやエクセルで管理するのはウッと思う&lt;/li&gt;
&lt;li&gt;人によってはマークダウンの書式が構造化された文書に見えないかもしれない（プレビューが必須だと面倒臭さが先に立ってしまう）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;チーム全体で合意を取ること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロダクトは自分たちで作っていくという意識を持てる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ツールやWebサービスを取り入れること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どんどん便利になっていきたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自動化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どんどん便利になっていきたい&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;時間を生むので圧倒的に正しい&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;運用系のツールもどんどん取り入れたいのだけど、チームの合意がないまま使い始めるとつらいはずなので、おすすめしていく運動とセットだよなと思っている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;便利になること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プログラマとしての使命だと思う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名前付け&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Matzの「名前重要」の教えを念頭に&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;クラス設計の第一歩と思っている&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;この辺がgolang難しい（クラスがない、ファイル分割をどの単位でやっていいのかなど）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目的を見失わないこと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;議論が停滞したりちょっと逸れてきたなというとき「どうすれば勝ちなんだっけ」と言うことにしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;以上です&lt;/h3&gt;
&lt;p&gt;的外れな感じになっていませんように…。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyllのpostをvim scriptで作る]]></title><description><![CDATA[問題 Jekyllでpost用のファイルを作るのがめんどくさい。 ファイル名が  数字やハイフンなんて打ちにくいところにあるのに… お決まりのテンプレートを書かなくちゃいけない dateが特にめんどい こんなの 解決方法 vim pluginを探すと…]]></description><link>https://fourside.github.iovim-script-jekyll</link><guid isPermaLink="false">https://fourside.github.iovim-script-jekyll</guid><pubDate>Mon, 31 Aug 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;問題&lt;/h3&gt;
&lt;p&gt;Jekyllでpost用のファイルを作るのがめんどくさい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ファイル名が &lt;code class=&quot;language-text&quot;&gt;yyyy-mm-dd-{title}.md&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字やハイフンなんて打ちにくいところにあるのに…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;お決まりのテンプレートを書かなくちゃいけない&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dateが特にめんどい&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;こんなの&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;---
layout: post
title: &amp;quot;記事のタイトル&amp;quot;
date: 2018-01-01 00:00:00 +0900
categories: vim
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;解決方法&lt;/h3&gt;
&lt;p&gt;vim pluginを探すと3つほどぱっと見つかるんだけど、欲しいものは簡単なものだし、自分でvim scriptを書いてみようと思った。&lt;/p&gt;
&lt;h3&gt;欲しいもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;コマンドを実行するとバッファが開かれ、そこにテンプレートが展開される&lt;/li&gt;
&lt;li&gt;コマンドは複数の引数を受け取ってハイフンでつなぎ、それが &lt;code class=&quot;language-text&quot;&gt;yyyy-mm-dd-{title}.md&lt;/code&gt; の &lt;code class=&quot;language-text&quot;&gt;title&lt;/code&gt; になる&lt;/li&gt;
&lt;li&gt;吐き出す場所はひとまずカレントディレクトリでいいや&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参考にしたもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://thinca.hatenablog.com/entry/20100201/1265009821&quot;&gt;Vimスクリプト基礎文法最速マスター - 永遠に未完成&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数年前にもvim script書こうと思い立ったことがあって、ヘルプよりこっちを見てしまう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://vim-jp.org/tips/start_vimscript.html&quot;&gt;vim-jp » Vim script事始め&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:h write-plugin&lt;/code&gt; が丁寧でvimはドキュメントしっかりしてるな～と思った&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;q-args&lt;/code&gt; というのを初めて知った。 &lt;code class=&quot;language-text&quot;&gt;args&lt;/code&gt; だとコマンドの引数を文字列として扱ってくれないので不便だなあと悩んでいた。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プラグインの2重ロードを防ぐイディオム、開発のとき邪魔だからコメントアウトしてたんだけど、うっかりコミットしそう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何回でもロードしていいように書くのが正解なのかな&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.kaoriya.net/blog/2012/02/19/&quot;&gt;Vimスクリプトを書いてみよう — KaoriYa&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;わかりやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自分のvimrc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普段のメモを取るように、日付をファイル名にしたバッファを開くコマンドを作っていたのだった&lt;/li&gt;
&lt;li&gt;それもどこからかコピーして持ってきたやつだったはず…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;できたもの&lt;/h3&gt;
&lt;p&gt;長いので折りたたみたい…&lt;/p&gt;
&lt;p&gt;{% gist d09cbf3a755e292e977e31e592a7ee09 %}&lt;/p&gt;
&lt;h3&gt;はまったところ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可変長引数をjoinすると、デリミタが無視されてスペースで連結されてしまう&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仕方なく、joinしてsplitしてjoinした…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;strftime(‘%z’)から &lt;code class=&quot;language-text&quot;&gt;+0900&lt;/code&gt; みたいなタイムゾーンのオフセットを得たいのだけど、Windowsだと &lt;code class=&quot;language-text&quot;&gt;東京（標準時）&lt;/code&gt; が返ってきてしまう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vim/vim/issues/860&quot;&gt;strftime(“%z”) not working correctly · Issue #860 · vim/vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;仕方ないっぽいので、Windowsでは &lt;code class=&quot;language-text&quot;&gt;+0900&lt;/code&gt; 固定にした。自分用だし。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[blog 環境]]></title><description><![CDATA[今までメモはローカルに溜めていて、マシンの買い替えなんかが起きるとめんどくさくて、そのせいでDropboxが必須になってしまっていたり、自宅でやったことを職場で確認したいだとかは基本的に困難なので、ブログとして公開することにした。 構成要素と理由 GitHub Pages…]]></description><link>https://fourside.github.iogithub_pages_jekyll</link><guid isPermaLink="false">https://fourside.github.iogithub_pages_jekyll</guid><pubDate>Mon, 31 Aug 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今までメモはローカルに溜めていて、マシンの買い替えなんかが起きるとめんどくさくて、そのせいでDropboxが必須になってしまっていたり、自宅でやったことを職場で確認したいだとかは基本的に困難なので、ブログとして公開することにした。&lt;/p&gt;
&lt;h3&gt;構成要素と理由&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb-ja.github.io/&quot;&gt;jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on WSL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;はてなやMediumでもよいんだろうけどソーシャルな機能はいらないし、tech系の話だったらgithubアカウント上でやったほうがいいかな程度の理由。テキストが手元に残るのもよい。&lt;/p&gt;
&lt;p&gt;あと最近、自宅のマシンをWindows10にしたこともあって、WSLだったらWindows上でrubyの開発環境を整えることに苦労しなくなると思った。cmd.exeからbashと打つだけでlinuxの世界になるのはすごい楽。ただrubyのビルドにえらい時間がかかったので途中で諦め、パッケージマネージャからインストールすることにした。バージョンはちょい古めだけど、nokogiriがすんなり入るのはうれしい。&lt;/p&gt;
&lt;h3&gt;手順&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ sudo apt-get install ruby ruby-dev zlib1g-dev
$ ruby -v
ruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]
$ gem install jekyll jekyll-feed minima
$ jekyll -v
jekyll 3.6.2
$ jekyll new fourside.github.io&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;zlibの1gってなんだろうね。&lt;/p&gt;
&lt;h3&gt;はまりどころ(未解決)&lt;/h3&gt;
&lt;p&gt;WSL(Ubuntu)でrootだと日本語が表示できない。標準ユーザだとできる。envコマンドの差分を見たけど影響しそうなところがないように見える。どこに差があるのか分からない。ターミナルに弱い。&lt;/p&gt;
&lt;h3&gt;めんどくさいところ&lt;/h3&gt;
&lt;p&gt;postするときにいっぱつでテンプレートを開きたい。ファイル名&lt;code class=&quot;language-text&quot;&gt;yyyy-mm-dd-{title}.md&lt;/code&gt;なんて手で打ちたくないし、ファイルの中身に作成日時まで入れなくちゃいけない。jekyllのコマンドにあってよさそうだけど、ぱっと見ない。&lt;/p&gt;
&lt;p&gt;vim pluginを探すか、これくらいなら自分で作ってみようかなという気持ちになっている。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[radiko 録音環境]]></title><description><![CDATA[さくらVPSを借りてradikoの録音環境を用意していたんだけど、今年の4月くらいから録音ができなくなっていた。今更だけど確認してみると、 がOSAKAになってたので、東京の放送局が聴取できない状態だった。radikoの仕様変更じゃなかったので一安心。 まずaws…]]></description><link>https://fourside.github.ioradiko_infra</link><guid isPermaLink="false">https://fourside.github.ioradiko_infra</guid><pubDate>Mon, 31 Aug 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;さくらVPSを借りてradikoの録音環境を用意していたんだけど、今年の4月くらいから録音ができなくなっていた。今更だけど確認してみると、&lt;code class=&quot;language-text&quot;&gt;curl https://radiko.jp/area&lt;/code&gt; がOSAKAになってたので、東京の放送局が聴取できない状態だった。radikoの仕様変更じゃなかったので一安心。&lt;/p&gt;
&lt;p&gt;まずawsの東京リージョンでt2.microインスタンスを作った。OSはamazon linux。radikoのエリア判定はTOKYOだったのでこれでよし。鍵はawsが生成したもの、インバウンドはsshとhttpのみ、さらにマイIPアドレスから許可するように、screenとvimのrcファイルを用意した。&lt;/p&gt;
&lt;p&gt;あとは必要なものをビルドするだけ。&lt;/p&gt;
&lt;h3&gt;必要なもの&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rtmpdump.mplayerhq.hu/&quot;&gt;rtmpdump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swftools.org/download.html&quot;&gt;swftools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ffmpeg.org/download.html&quot;&gt;ffmpeg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;前準備&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;yum &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt;
yum groupinstall &lt;span class=&quot;token string&quot;&gt;&quot;Development Tools&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;rtmpdump&lt;/h3&gt;
&lt;p&gt;オフィシャルの通り、&lt;code class=&quot;language-text&quot;&gt;git clone git://git.ffmpeg.org/rtmpdump&lt;/code&gt; する。READMEを見るとconfigureしなくてよいみたい。&lt;code class=&quot;language-text&quot;&gt;make SYS=posix &amp;amp;&amp;amp; make install&lt;/code&gt;した。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# rtmpdump -v
rtmpdump: error while loading shared libraries: librtmp.so.1: cannot open shared object file: No such file or directory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;soが読めてないっぽい。ビルドしたsoは&lt;code class=&quot;language-text&quot;&gt;/usr/local/lib&lt;/code&gt;にインストールされてる。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# cat /etc/ld.so.conf
include ld.so.conf.d/.conf
# echo /usr/local/lib &amp;gt; /etc/ld.so.conf.d/rtmpdump.conf
# ldconfig&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cf. &lt;a href=&quot;https://blogs.yahoo.co.jp/mrsd_tangerine/40359620.html&quot;&gt;https://blogs.yahoo.co.jp/mrsd_tangerine/40359620.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;swftools&lt;/h3&gt;
&lt;p&gt;最新のtarballを落としてくる。configure, make, make installですんなりいけた。(さくらVPSで使ってたdebianでは苦労した印象あったけど曖昧）&lt;/p&gt;
&lt;h3&gt;ffmpeg&lt;/h3&gt;
&lt;p&gt;すっかり忘れてたんだけど旧環境ではlameを使ってて、それをconfigure時に指定してやる必要がある。（指定しなくてもビルドはできるけど、ここでやりたいのはflvからmp3にエンコードすることなので）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lame.sourceforge.net/download.php&quot;&gt;lame&lt;/a&gt;から落としてくる。configure, make, make installですんなりビルドできる。soは/usr/local/libに吐かれる。
このあとffmpegのビルド。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# configure --enable-libmp3lame --disable-x86asm
# make
# make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;以上&lt;/h3&gt;
&lt;p&gt;こんな感じでした。&lt;/p&gt;</content:encoded></item></channel></rss>